# vim:set syntax=sh:
# vim:set nowrap:

   set console log=logs/%0.log

:example-code

   echo
   echo
   echo
   echo
   echo ************* STAGE 8 - C LIBRARY ADDITIONS/FIXES *************
   echo
   echo
   echo

   set cpu 832
   set throttle 25000/1
   set ttp enabled
   set pas devno=20
   set dm0 msm80
   set environ DATE=%DATE_MM%/%DATE_DD%/%DATE_YY%
   set environ TIME=%TIME_HH%:%TIME_MM%
   send delay=10000

   attach -e dm0 os32.dsk

   deposit 7c 002

   noexpect
   expect "ENTER DATE AND TIME" send "set time %DATE%,%TIME%\r";c
   expect "*";c
   expect "*" send "mark dsc4:,on\r";c
   expect "DSC4:  SYS" send "volume sys\r";c
   expect "*";c
   expect "*" send "volume sys/temp\r";c
   # LIB.CSS/0
   expect "\r\n*" send "***** UPLOADING ***** LIB.CSS/0 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "load sys:lib/s,20\r";c
   expect ".CMDP>" send "start ,@1 @2 @3 @4\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete lib.css/0 ; rename z.z,lib.css/0\r";c
   # LIB.CSS/24
   expect "\r\n*" send "***** UPLOADING ***** LIB.CSS/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "sys:lib/s @1 @2 @3 @4\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete lib.css/24 ; rename z.z,lib.css/24\r";c
   # LIB.C/24
   expect "\r\n*" send "***** UPLOADING ***** LIB.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "/*\r";c
   expect ".CMDP>" send " * This program simplifies the creation and maintenance of object\r";c
   expect ".CMDP>" send " * libraries. OS/32's LIBLDR has somewhat cryptic syntax, using two\r";c
   expect ".CMDP>" send " * character commands, and numeric LUs. The commands are sensitive\r";c
   expect ".CMDP>" send " * to whitespace. As usual, documentation is also missing.\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * Fortunately, OS/32 libraries are not that difficult to reverse\r";c
   expect ".CMDP>" send " * engineer:\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * - A <library> is merely a concatenation of <object> files.\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * - An <object> is a collection of 126 byte <records>. The first\r";c
   expect ".CMDP>" send " *   half word (two bytes) of each record are a kind of 'record\r";c
   expect ".CMDP>" send " *   number'.\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * - The first <record> of each <object> has an intial half word\r";c
   expect ".CMDP>" send " *   with value 0xFFFF. The object's name is found at offset 5,\r";c
   expect ".CMDP>" send " *   and the name is padded with spaces up to a maximum of 8\r";c
   expect ".CMDP>" send " *   characters.\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * Externals are listed after the object's code (binary), and are\r";c
   expect ".CMDP>" send " * easily recognised in a hex dump. But I haven't yet figured out\r";c
   expect ".CMDP>" send " * a method for determining the correct offset.\r";c
   expect ".CMDP>" send " */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "/* defined in std.h, but cannot #include with stdio... */\r";c
   expect ".CMDP>" send "#define READ 0\r";c
   expect ".CMDP>" send "#define WRITE 1\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "/* there is no rename() function, but there is an undocumented mv() */\r";c
   expect ".CMDP>" send "#define rename mv\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "static struct\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   unsigned short recno;        /* two bytes, FFFF for start of object */\r";c
   expect ".CMDP>" send "   unsigned char  fill1[3];     /* three bytes, last always 0F? */\r";c
   expect ".CMDP>" send "   char           name[8];      /* 8 chars, padded with spaces */\r";c
   expect ".CMDP>" send "   unsigned char  therest[113]; /* the rest, 126 bytes total */\r";c
   expect ".CMDP>" send "} rec[1];\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "static char *tmp = \"zzzzzzzz.lib\";\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int exists (fnam)\r";c
   expect ".CMDP>" send "   char *fnam;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int fd = open (fnam, READ|IBINARY);\r";c
   expect ".CMDP>" send "   if (fd >= 0) close (fd);\r";c
   expect ".CMDP>" send "   return fd >= 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int openread (fnam, what)\r";c
   expect ".CMDP>" send "   char *fnam;\r";c
   expect ".CMDP>" send "   char *what;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int fd = open (fnam, READ|IBINARY);\r";c
   expect ".CMDP>" send "   if (fd < 0)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"CANNOT OPEN %%s: %%s\\n\", what, fnam);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return fd;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int openscratch (fnam, what)\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int fd;\r";c
   expect ".CMDP>" send "   remove (fnam);\r";c
   expect ".CMDP>" send "   fd = creat (fnam, WRITE|IBINARY);\r";c
   expect ".CMDP>" send "   if (fd < 0)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"CANNOT CREATE %%s: %%s\\n\", fnam, what);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return fd;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int objmatch (obj)\r";c
   expect ".CMDP>" send "   char *obj;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *p = obj;\r";c
   expect ".CMDP>" send "   char *q = rec->name;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   while ( q < rec->therest &&\r";c
   expect ".CMDP>" send "           *q != ' ' &&\r";c
   expect ".CMDP>" send "           *p != 0 &&\r";c
   expect ".CMDP>" send "           toupper(*p) == toupper(*q) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      p++;\r";c
   expect ".CMDP>" send "      q++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if ( q == rec->therest || *q == ' ' ) return *p == 0;\r";c
   expect ".CMDP>" send "   else return toupper(*p) - toupper(*q) == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int main (argc, argv)\r";c
   expect ".CMDP>" send "   int argc;\r";c
   expect ".CMDP>" send "   char **argv;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *cmd, lib[32], obj[32];\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * All our files are going to have 126 byte record lengths. The\r";c
   expect ".CMDP>" send "    * C library uses a global variable fsrecl for this.\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   extern int fsrecl;\r";c
   expect ".CMDP>" send "   fsrecl = 126;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * Check required parameters. The argument count is a bit messed\r";c
   expect ".CMDP>" send "    * up by concatenated CSS parameters. If you run LIB.CSS without\r";c
   expect ".CMDP>" send "    * parameters, i.e. all params null, you get argv=5 and argv[1],\r";c
   expect ".CMDP>" send "    * argv[2], argv[3] return empty strings (not NULL, not junk).\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   cmd = argv[1];\r";c
   expect ".CMDP>" send "   strncpy (lib, argv[2], sizeof(lib));\r";c
   expect ".CMDP>" send "   strncpy (obj, argv[3], sizeof(obj));\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (!*cmd || !*lib) usageexit();\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (!*obj &&\r";c
   expect ".CMDP>" send "       stricmp(cmd,\"CREATE\") &&\r";c
   expect ".CMDP>" send "       stricmp(cmd,\"LIST\")) usageexit();\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * Check command.\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if ( stricmp(cmd,\"CREATE\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"LIST\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"ADD\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"REPLACE\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"REMOVE\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"EXTRACT\") )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"INVALID COMMAND: '%%s'\\n\", cmd);\r";c
   expect ".CMDP>" send "      printf (\"%%s%%s\\n\",\r";c
   expect ".CMDP>" send "              \"VALID COMMANDS ARE: CREATE, LIST, ADD, REPLACE, \",\r";c
   expect ".CMDP>" send "              \"REMOVE, EXTRACT.\");\r";c
   expect ".CMDP>" send "      return 1;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * Default file extensions. Libraries default to .LIB, but\r";c
   expect ".CMDP>" send "    * may have .OBJ if you prefer. Objects must not have an\r";c
   expect ".CMDP>" send "    * extension because we may use it to refer to a library\r";c
   expect ".CMDP>" send "    * entry that we want to remove.\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (!strchr(lib,'.')) strcat (lib, \".lib\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (*obj && strchr(obj,'.') )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"OBJECT FILE EXTENSION NOT ALLOWED: %%s\\n\", obj);\r";c
   expect ".CMDP>" send "      return 1;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * Do the work.\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "        if (!stricmp(cmd,\"CREATE\"))  libcreate  (lib);\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"LIST\"))    liblist    (lib);\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"ADD\"))     libmodify  (lib, obj, 'A');\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"REPLACE\")) libmodify  (lib, obj, 'P');\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"REMOVE\"))  libmodify  (lib, obj, 'M');\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"EXTRACT\")) libextract (lib, obj);\r";c
   expect ".CMDP>" send "   else\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"Wobbler!\\n\");\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   return 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "fatal ()\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   remove (tmp);\r";c
   expect ".CMDP>" send "   exit (1);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "usageexit ()\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   printf (\"\\n\");\r";c
   expect ".CMDP>" send "   printf (\"\\n\");\r";c
   expect ".CMDP>" send "   printf (\"USAGE: LIB CREATE  libfd\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB LIST    libfd\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB ADD     libfd obj\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB REPLACE libfd obj\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB REMOVE  libfd obj\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB EXTRACT libfd obj\\n\");\r";c
   expect ".CMDP>" send "   printf (\"\\n\");\r";c
   expect ".CMDP>" send "   fatal ();\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "libcreate (lib)\r";c
   expect ".CMDP>" send "   char *lib;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (exists(lib))\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"LIBRARY ALREADY EXISTS: %%s\\n\", lib);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   close (openscratch(lib,\"LIBRARY\"));\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "liblist (lib)\r";c
   expect ".CMDP>" send "   char *lib;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int fd, name[10], nobs=0, nrec=0, ntot=0;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   fd = openread (lib, \"LIBRARY\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   printf (\"\\n\\n\");\r";c
   expect ".CMDP>" send "   printf (\" name       recs\\n\");\r";c
   expect ".CMDP>" send "   printf (\" --------  -----\\n\");\r";c
   expect ".CMDP>" send "   while ( read(fd,rec,sizeof(rec)) == sizeof(rec) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (rec->recno == 0xFFFF)\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         if (nobs > 0) printf (\" %%s  %%5d\\n\", name, nrec);\r";c
   expect ".CMDP>" send "         sprintf (name, \"%%8.8s\", rec->name);\r";c
   expect ".CMDP>" send "         nobs++;\r";c
   expect ".CMDP>" send "         nrec = 0;\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      nrec++;\r";c
   expect ".CMDP>" send "      ntot++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   if (nobs > 0) printf (\" %%s  %%5d\\n\", name, nrec);\r";c
   expect ".CMDP>" send "   printf (\"\\n %%d objects in %%s, %%d records total\\n\\n\", nobs, lib, ntot);\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   close (fd);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "libextract (lib, obj)\r";c
   expect ".CMDP>" send "   char *lib;\r";c
   expect ".CMDP>" send "   char *obj;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int libfd, objfd;\r";c
   expect ".CMDP>" send "   char copy=0, found=0, objfn[32];\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   libfd = openread (lib, \"LIBRARY\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   sprintf (objfn, \"%%s.obj\", obj);\r";c
   expect ".CMDP>" send "   objfd = openscratch (objfn, \"OBJECT\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   while ( read(libfd,rec,sizeof(rec)) == sizeof(rec) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (rec->recno == 0xFFFF)\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         if (objmatch(obj))\r";c
   expect ".CMDP>" send "         {\r";c
   expect ".CMDP>" send "            copy = 1;\r";c
   expect ".CMDP>" send "            found = 1;\r";c
   expect ".CMDP>" send "         }\r";c
   expect ".CMDP>" send "         else\r";c
   expect ".CMDP>" send "            copy = 0;\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      if (copy) write (objfd, rec, sizeof(rec));\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (!found)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"OBJECT %%s NOT FOUND IN LIBRARY\", obj);\r";c
   expect ".CMDP>" send "      close (objfd);\r";c
   expect ".CMDP>" send "      remove (objfn);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   close (objfd);\r";c
   expect ".CMDP>" send "   close (libfd);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "libmodify (lib, obj, op)\r";c
   expect ".CMDP>" send "   char *lib;\r";c
   expect ".CMDP>" send "   char *obj;\r";c
   expect ".CMDP>" send "   int op;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char found=0, copy=0, objfn[32];\r";c
   expect ".CMDP>" send "   int libfd, objfd, tmpfd;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* add/replace/remove */\r";c
   expect ".CMDP>" send "   if (!strchr(\"APM\",op))\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"LIBPROCESS INVALID OPERATION '%%c'\\n\", op);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   libfd = openread    (lib, \"LIBRARY\");\r";c
   expect ".CMDP>" send "   tmpfd = openscratch (tmp, \"TEMPFILE\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   while ( read(libfd,rec,sizeof(rec)) == sizeof(rec) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (rec->recno == 0xFFFF)\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         if (objmatch(obj))\r";c
   expect ".CMDP>" send "         {\r";c
   expect ".CMDP>" send "            copy = 0;\r";c
   expect ".CMDP>" send "            found = 1;\r";c
   expect ".CMDP>" send "         }\r";c
   expect ".CMDP>" send "         else\r";c
   expect ".CMDP>" send "            copy = 1;\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      if (copy) write (tmpfd, rec, sizeof(rec));\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* replace/remove */\r";c
   expect ".CMDP>" send "   if (strchr(\"PM\",op) && !found)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"OBJECT %%s NOT FOUND IN LIBRARY\", obj);\r";c
   expect ".CMDP>" send "      close (tmpfd);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* add */\r";c
   expect ".CMDP>" send "   if (strchr(\"A\",op) && found)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"OBJECT %%s ALREADY EXISTS IN LIBRARY\\n\", obj);\r";c
   expect ".CMDP>" send "      close (tmpfd);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* add/replace */\r";c
   expect ".CMDP>" send "   if (strchr(\"AP\",op))\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      sprintf (objfn, \"%%s.obj\", obj);\r";c
   expect ".CMDP>" send "      objfd = openread (objfn, \"OBJECT\");\r";c
   expect ".CMDP>" send "      while ( read(objfd,rec,sizeof(rec)) == sizeof(rec) )\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         write (tmpfd, rec, sizeof(rec));\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      close (objfd);\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   close (tmpfd);\r";c
   expect ".CMDP>" send "   close (libfd);\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* add/replace/remove */\r";c
   expect ".CMDP>" send "   if (strchr(\"APM\",op)) rename (tmp, lib);\r";c
   expect ".CMDP>" send "   else remove (tmp);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete lib.c/24 ; rename z.z,lib.c/24\r";c
   # ATOI.C/24
   expect "\r\n*" send "***** UPLOADING ***** ATOI.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "#include <ctype.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int atoi (p)\r";c
   expect ".CMDP>" send "   char *p;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   register int min = *p == '-';\r";c
   expect ".CMDP>" send "   register int ret=0;\r";c
   expect ".CMDP>" send "   if (*p == '-' || *p == '+') p++;\r";c
   expect ".CMDP>" send "   while (isdigit(*p))\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      ret = ret*10 + *p - '0';\r";c
   expect ".CMDP>" send "      p++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return min ? -ret : ret;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete atoi.c/24 ; rename z.z,atoi.c/24\r";c
   # MEMCMP.C/24
   expect "\r\n*" send "***** UPLOADING ***** MEMCMP.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "int memcmp(p1,p2,len)\r";c
   expect ".CMDP>" send "   char *p1, *p2;\r";c
   expect ".CMDP>" send "   int len;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while (--len > 0 && *p1 == *p2)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      p1++;\r";c
   expect ".CMDP>" send "      p2++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return (*p1-*p2);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete memcmp.c/24 ; rename z.z,memcmp.c/24\r";c
   # STRCHR.C/24
   expect "\r\n*" send "***** UPLOADING ***** STRCHR.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char *strchr(str,c)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while (*str)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (*str == c) return str;\r";c
   expect ".CMDP>" send "      str++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return *str == c ? str : NULL;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete strchr.c/24 ; rename z.z,strchr.c/24\r";c
   # STRICMP.C/24
   expect "\r\n*" send "***** UPLOADING ***** STRICMP.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "int stricmp(s1,s2)\r";c
   expect ".CMDP>" send "   char *s1;\r";c
   expect ".CMDP>" send "   char *s2;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while ( *s1 && *s2 )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      int diff = toupper(*s1) - toupper(*s2);\r";c
   expect ".CMDP>" send "      if (diff) return diff;\r";c
   expect ".CMDP>" send "      s1++;\r";c
   expect ".CMDP>" send "      s2++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return *s1 - *s2;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete stricmp.c/24 ; rename z.z,stricmp.c/24\r";c
   # STRISTR.C/24
   expect "\r\n*" send "***** UPLOADING ***** STRISTR.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char *stristr (haystack,needle)\r";c
   expect ".CMDP>" send "   char *haystack;\r";c
   expect ".CMDP>" send "   char *needle;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *hs, *p, *q;\r";c
   expect ".CMDP>" send "   if (!*needle) return strchr(haystack,0);\r";c
   expect ".CMDP>" send "   for (hs=haystack; *hs; hs++)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (toupper(*hs) == toupper(*needle))\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         p = needle;\r";c
   expect ".CMDP>" send "         q = hs;\r";c
   expect ".CMDP>" send "         while ( *p > 0 &&\r";c
   expect ".CMDP>" send "                 *q > 0 &&\r";c
   expect ".CMDP>" send "                 toupper(*p) == toupper(*q) )\r";c
   expect ".CMDP>" send "         {\r";c
   expect ".CMDP>" send "            p++;\r";c
   expect ".CMDP>" send "            q++;\r";c
   expect ".CMDP>" send "         }\r";c
   expect ".CMDP>" send "         if (*p == 0) return (hs);\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return NULL;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete stristr.c/24 ; rename z.z,stristr.c/24\r";c
   # STRNICMP.C/24
   expect "\r\n*" send "***** UPLOADING ***** STRNICMP.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "int strnicmp(s1,s2,n)\r";c
   expect ".CMDP>" send "   char *s1, *s2;\r";c
   expect ".CMDP>" send "   int n;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while (n > 0 && *s1 != 0 && *s2 != 0)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      int diff = toupper(*s1) - toupper(*s2);\r";c
   expect ".CMDP>" send "      if (diff) return diff;\r";c
   expect ".CMDP>" send "      s1++;\r";c
   expect ".CMDP>" send "      s2++;\r";c
   expect ".CMDP>" send "      n--;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   if (n > 0)\r";c
   expect ".CMDP>" send "      return toupper(*s1) - toupper(*s2);\r";c
   expect ".CMDP>" send "   else\r";c
   expect ".CMDP>" send "      return 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete strnicmp.c/24 ; rename z.z,strnicmp.c/24\r";c
   # STRRCHR.C/24
   expect "\r\n*" send "***** UPLOADING ***** STRRCHR.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char *strrchr(str,c)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *p;\r";c
   expect ".CMDP>" send "   for (p=str; *p; p++) ;\r";c
   expect ".CMDP>" send "   while (p >= str)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (*p == c) return (p);\r";c
   expect ".CMDP>" send "      p--;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return (NULL);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete strrchr.c/24 ; rename z.z,strrchr.c/24\r";c
   # TOLOWER.C/24
   expect "\r\n*" send "***** UPLOADING ***** TOLOWER.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "int tolower(c)\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (c >= 'A' && c <= 'Z') return c + ('a'-'A');\r";c
   expect ".CMDP>" send "   else return c;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete tolower.c/24 ; rename z.z,tolower.c/24\r";c
   # TOUPPER.C/24
   expect "\r\n*" send "***** UPLOADING ***** TOUPPER.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "int toupper(c)\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (c >= 'a' && c <= 'z') return c - ('a'-'A');\r";c
   expect ".CMDP>" send "   else return c;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete toupper.c/24 ; rename z.z,toupper.c/24\r";c
   # LTRIM.C/24
   expect "\r\n*" send "***** UPLOADING ***** LTRIM.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "char *ltrim (str)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *p=str, *q=str;\r";c
   expect ".CMDP>" send "   while (*p != 0 && *p <= ' ') p++;\r";c
   expect ".CMDP>" send "   while (*p) *q++ = *p++;\r";c
   expect ".CMDP>" send "   *q = 0;\r";c
   expect ".CMDP>" send "   return (str);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete ltrim.c/24 ; rename z.z,ltrim.c/24\r";c
   # RTRIM.C/24
   expect "\r\n*" send "***** UPLOADING ***** RTRIM.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "char *rtrim (str)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *p = str;\r";c
   expect ".CMDP>" send "   while (*p) p++;\r";c
   expect ".CMDP>" send "   while (p >= str && *p <= ' ') *p-- = 0;\r";c
   expect ".CMDP>" send "   return (str);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete rtrim.c/24 ; rename z.z,rtrim.c/24\r";c
   # TEST.C/24
   expect "\r\n*" send "***** UPLOADING ***** TEST.C/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "main()\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   printf (\"\\n\\n\");\r";c
   expect ".CMDP>" send "   if ( tatoi (\"42\", 42) &&\r";c
   expect ".CMDP>" send "        tatoi (\"-42\", -42) &&\r";c
   expect ".CMDP>" send "        tmemcmp (\"abc\", \"abcde\", 3,  0) &&\r";c
   expect ".CMDP>" send "        tmemcmp (\"abcde\", \"abc\", 3,  0) &&\r";c
   expect ".CMDP>" send "        tmemcmp (\"abd\",   \"abc\", 3, +1) &&\r";c
   expect ".CMDP>" send "        tmemcmp (\"aac\",   \"abc\", 3, -1) &&\r";c
   expect ".CMDP>" send "        tstrchr (\"abcdecde\", 'c',  \"cdecde\") &&\r";c
   expect ".CMDP>" send "        tstrchr (\"abcdecde\",  0,   \"\") &&\r";c
   expect ".CMDP>" send "        tstrchr (\"abcdecde\", 'x',  NULL) &&\r";c
   expect ".CMDP>" send "        tstrrchr (\"abcdecde\", 'c', \"cde\") &&\r";c
   expect ".CMDP>" send "        tstrrchr (\"abcdecde\", 0,   \"\") &&\r";c
   expect ".CMDP>" send "        tstrrchr (\"abcdecde\", 'x', NULL) &&\r";c
   expect ".CMDP>" send "        tstristr (\"abcde\", \"DE\", \"de\") &&\r";c
   expect ".CMDP>" send "        tstristr (\"abcde\", \"\", \"\") &&\r";c
   expect ".CMDP>" send "        tstristr (\"abcde\", \"xyz\", NULL) &&\r";c
   expect ".CMDP>" send "        tstricmp (\"abc\", \"ab\", +1) &&\r";c
   expect ".CMDP>" send "        tstricmp (\"abc\", \"abc\", 0) &&\r";c
   expect ".CMDP>" send "        tstricmp (\"ABC\", \"abc\", 0) &&\r";c
   expect ".CMDP>" send "        tstrnicmp (\"abc\", \"ABCDE\", 3, 0) &&\r";c
   expect ".CMDP>" send "        tstrnicmp (\"abcde\", \"ABC\", 3, 0) &&\r";c
   expect ".CMDP>" send "        tstrnicmp (\"abd\", \"ABC\", 3, +1) &&\r";c
   expect ".CMDP>" send "        tstrnicmp (\"aac\", \"ABC\", 3, -1) &&\r";c
   expect ".CMDP>" send "        tltrim (\" \\t abc\", \"abc\") &&\r";c
   expect ".CMDP>" send "        tltrim (\"xyz\", \"xyz\") &&\r";c
   expect ".CMDP>" send "        trtrim (\"abc \\t \", \"abc\") &&\r";c
   expect ".CMDP>" send "        trtrim (\"xyz\", \"xyz\") )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"\\n All tests PASSED\\n\\n\");\r";c
   expect ".CMDP>" send "      return (0);\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   else\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"\\n\");\r";c
   expect ".CMDP>" send "      return (1);\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "sign(num)\r";c
   expect ".CMDP>" send "   int num;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (num == 0) return 0;\r";c
   expect ".CMDP>" send "   if (num < 0) return -1;\r";c
   expect ".CMDP>" send "   if (num > 0) return 1;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tatoi(str,exp)\r";c
   expect ".CMDP>" send "  char *str;\r";c
   expect ".CMDP>" send "  int exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int ret = atoi(str);\r";c
   expect ".CMDP>" send "   char *pf = ret == exp ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s atoi(\\\"%%s\\\") = %%d\\n\", pf, str, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tmemcmp(s1,s2,n,exp)\r";c
   expect ".CMDP>" send "   char *s1, *s2;\r";c
   expect ".CMDP>" send "   int n, exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int ret;\r";c
   expect ".CMDP>" send "   char *pf;\r";c
   expect ".CMDP>" send "   ret = memcmp(s1,s2,n);;\r";c
   expect ".CMDP>" send "   pf = sign(ret) == sign(exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s memcmp(\\\"%%s\\\",\\\"%%s\\\",%%d) = %%d\\n\", pf, s1, s2, n, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstrchr(s,c,exp)\r";c
   expect ".CMDP>" send "   char *s, *exp;\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *pf, *ret=strchr(s,c);\r";c
   expect ".CMDP>" send "        if (exp == NULL && ret == NULL) pf = \" PASS \";\r";c
   expect ".CMDP>" send "   else if (exp == NULL || ret == NULL) pf = \"*FAIL*\";\r";c
   expect ".CMDP>" send "   else pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s strchr(\\\"%%s\\\",'%%c') = %%s\\n\", pf, s, c, ret?ret:\"NULL\");\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstrrchr(s,c,exp)\r";c
   expect ".CMDP>" send "   char *s, *exp;\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *pf, *ret=strrchr(s,c);\r";c
   expect ".CMDP>" send "        if (exp == NULL && ret == NULL) pf = \" PASS \";\r";c
   expect ".CMDP>" send "   else if (exp == NULL || ret == NULL) pf = \"*FAIL*\";\r";c
   expect ".CMDP>" send "   else pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s strrchr(\\\"%%s\\\",'%%c') = %%s\\n\", pf, s, c, ret?ret:\"NULL\");\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstristr(s1,s2,exp)\r";c
   expect ".CMDP>" send "   char *s1, *s2, *exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *ret, *pf;\r";c
   expect ".CMDP>" send "   ret = stristr(s1,s2);\r";c
   expect ".CMDP>" send "        if (ret == NULL && exp == NULL) pf = \" PASS \";\r";c
   expect ".CMDP>" send "   else if (ret == NULL || exp == NULL) pf = \"*FAIL*\";\r";c
   expect ".CMDP>" send "   else pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s stristr(\\\"%%s\\\",\\\"%%s\\\") = %%s\\n\", pf, s1, s2, ret?ret:\"NULL\");\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstricmp(s1,s2,exp)\r";c
   expect ".CMDP>" send "   char *s1, *s2;\r";c
   expect ".CMDP>" send "   int exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int ret;\r";c
   expect ".CMDP>" send "   char *pf;\r";c
   expect ".CMDP>" send "   ret = stricmp(s1,s2);;\r";c
   expect ".CMDP>" send "   pf = sign(ret) == sign(exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s stricmp(\\\"%%s\\\",\\\"%%s\\\") = %%d\\n\", pf, s1, s2, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstrnicmp(s1,s2,n,exp)\r";c
   expect ".CMDP>" send "   char *s1, *s2;\r";c
   expect ".CMDP>" send "   int n, exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int ret;\r";c
   expect ".CMDP>" send "   char *pf;\r";c
   expect ".CMDP>" send "   ret = strnicmp(s1,s2,n);;\r";c
   expect ".CMDP>" send "   pf = sign(ret) == sign(exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s strnicmp(\\\"%%s\\\",\\\"%%s\\\",%%d) = %%d\\n\", pf, s1, s2, n, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tltrim (str,exp)\r";c
   expect ".CMDP>" send "   char *str, *exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char buf[10], *ret, *pf;\r";c
   expect ".CMDP>" send "   strcpy (buf, str);\r";c
   expect ".CMDP>" send "   ret = ltrim(buf);\r";c
   expect ".CMDP>" send "   pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s ltrim(\\\"%%s\\\") = \\\"%%s\\\"\\n\", pf, str, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "trtrim (str,exp)\r";c
   expect ".CMDP>" send "   char *str, *exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char buf[10], *ret, *pf;\r";c
   expect ".CMDP>" send "   strcpy (buf, str);\r";c
   expect ".CMDP>" send "   ret = rtrim(buf);\r";c
   expect ".CMDP>" send "   pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s rtrim(\\\"%%s\\\") = \\\"%%s\\\"\\n\", pf, str, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete test.c/24 ; rename z.z,test.c/24\r";c
   # MAKE.CSS/24
   expect "\r\n*" send "***** UPLOADING ***** MAKE.CSS/24 *****\r";c
   expect "\r\n*" send "xdelete z.z ; alloc z.z,in,80 ; build z.z,append\r";c
   expect ".CMDP>" send "mtmonly\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label param\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $if ch \"@1\" eq \"clean\"\r";c
   expect ".CMDP>" send "      $goto clean\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $if ch \"@1\" eq \"test\"\r";c
   expect ".CMDP>" send "      $goto test\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $ifnnull @1\r";c
   expect ".CMDP>" send "      $write USAGE: make [test|clean]\r";c
   expect ".CMDP>" send "      $clear\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label compile\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write COMPILING ........\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   ccc atoi\r";c
   expect ".CMDP>" send "   ccc ltrim\r";c
   expect ".CMDP>" send "   ccc memcmp\r";c
   expect ".CMDP>" send "   ccc rtrim\r";c
   expect ".CMDP>" send "   ccc strchr\r";c
   expect ".CMDP>" send "   ccc stricmp\r";c
   expect ".CMDP>" send "   ccc stristr\r";c
   expect ".CMDP>" send "   ccc strnicmp\r";c
   expect ".CMDP>" send "   ccc strrchr\r";c
   expect ".CMDP>" send "   ccc tolower\r";c
   expect ".CMDP>" send "   ccc toupper\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label libtsk\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $ifnx lib.tsk/s\r";c
   expect ".CMDP>" send "      $write\r";c
   expect ".CMDP>" send "      $write BUILDING LIB.TSK/S ........\r";c
   expect ".CMDP>" send "      $write\r";c
   expect ".CMDP>" send "      cccl lib,strchr.obj,stricmp.obj,toupper.obj\r";c
   expect ".CMDP>" send "      rename lib.tsk,lib.tsk/s\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label library\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write CREATING LIBRARY ........\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   xdelete libfix.lib\r";c
   expect ".CMDP>" send "   lib create libfix\r";c
   expect ".CMDP>" send "   lib add libfix atoi\r";c
   expect ".CMDP>" send "   lib add libfix ltrim\r";c
   expect ".CMDP>" send "   lib add libfix memcmp\r";c
   expect ".CMDP>" send "   lib add libfix rtrim\r";c
   expect ".CMDP>" send "   lib add libfix strchr\r";c
   expect ".CMDP>" send "   lib add libfix stricmp\r";c
   expect ".CMDP>" send "   lib add libfix stristr\r";c
   expect ".CMDP>" send "   lib add libfix strnicmp\r";c
   expect ".CMDP>" send "   lib add libfix strrchr\r";c
   expect ".CMDP>" send "   lib add libfix tolower\r";c
   expect ".CMDP>" send "   lib add libfix toupper\r";c
   expect ".CMDP>" send "   lib list libfix\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label test\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write RUNNING TESTS ........\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   ccc test\r";c
   expect ".CMDP>" send "   ccl test,libfix.lib\r";c
   expect ".CMDP>" send "   test\r";c
   expect ".CMDP>" send "   xdelete test.css\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label done\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write DONE!\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label clean\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write Removing LIBFIX.LIB file ........\r";c
   expect ".CMDP>" send "   xdelete libfix.lib\r";c
   expect ".CMDP>" send "   $write Removing TEST.TSK file ........\r";c
   expect ".CMDP>" send "   xdelete test.tsk\r";c
   expect ".CMDP>" send "   $write Removing .OBJ files ........\r";c
   expect ".CMDP>" send "   wild delete,-.obj\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete make.css/24 ; rename z.z,make.css/24\r";c
   # shutdown
   expect "\r\n*"  send "mark dsc4:,off ; display devices\r";c
   expect "DSC5  FE 0000   OFF" detach dm0 ; echo ; echo ; exit 0

   boot dm0
   exit 1

