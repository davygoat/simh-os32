# vim:set syntax=sh:
# vim:set nowrap:

   set console log=logs/%0.log

:example-code

   echo
   echo
   echo
   echo
   echo ************* STAGE 8 - C LIBRARY ADDITIONS/FIXES *************
   echo
   echo
   echo

   set cpu 832
   set throttle 25000/1
   set ttp enabled
   set pas devno=20
   set dm0 msm80
   set environ DATE=%DATE_MM%/%DATE_DD%/%DATE_YY%
   set environ TIME=%TIME_HH%:%TIME_MM%
   send delay=10000

   attach -e dm0 os32.dsk

   deposit 7c 002

   noexpect
   expect "ENTER DATE AND TIME" send "set time %DATE%,%TIME%\r";c
   expect "*";c
   expect "*" send "mark dsc4:,on\r";c
   expect "DSC4:  SYS" send "volume sys\r";c
   expect "*";c
   expect "*" send "volume sys/temp\r";c
   # ATOI.C/24
   expect "\r\n*" send "alloc atoi.c,in,80 ; build atoi.c,append\r";c
   expect ".CMDP>" send "#include <ctype.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int atoi (p)\r";c
   expect ".CMDP>" send "   char *p;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   register int min = *p == '-';\r";c
   expect ".CMDP>" send "   register int ret=0;\r";c
   expect ".CMDP>" send "   if (*p == '-' || *p == '+') p++;\r";c
   expect ".CMDP>" send "   while (isdigit(*p))\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      ret = ret*10 + *p - '0';\r";c
   expect ".CMDP>" send "      p++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return min ? -ret : ret;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename atoi.c,atoi.c/24\r";c
   # LTRIM.C/24
   expect "\r\n*" send "alloc ltrim.c,in,80 ; build ltrim.c,append\r";c
   expect ".CMDP>" send "char *ltrim (str)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *p=str, *q=str;\r";c
   expect ".CMDP>" send "   while (*p != 0 && *p <= ' ') p++;\r";c
   expect ".CMDP>" send "   while (*p) *q++ = *p++;\r";c
   expect ".CMDP>" send "   *q = 0;\r";c
   expect ".CMDP>" send "   return (str);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename ltrim.c,ltrim.c/24\r";c
   # MAKE.CSS/24
   expect "\r\n*" send "alloc make.css,in,80 ; build make.css,append\r";c
   expect ".CMDP>" send "mtmonly\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label param\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $if ch \"@1\" eq \"clean\"\r";c
   expect ".CMDP>" send "      $goto clean\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $if ch \"@1\" eq \"test\"\r";c
   expect ".CMDP>" send "      $goto test\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $ifnnull @1\r";c
   expect ".CMDP>" send "      $write USAGE: make [test|clean]\r";c
   expect ".CMDP>" send "      $clear\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label compile\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write COMPILING ........\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   ccc atoi\r";c
   expect ".CMDP>" send "   ccc ltrim\r";c
   expect ".CMDP>" send "   ccc memcmp\r";c
   expect ".CMDP>" send "   ccc rtrim\r";c
   expect ".CMDP>" send "   ccc strchr\r";c
   expect ".CMDP>" send "   ccc stricmp\r";c
   expect ".CMDP>" send "   ccc stristr\r";c
   expect ".CMDP>" send "   ccc strnicmp\r";c
   expect ".CMDP>" send "   ccc strrchr\r";c
   expect ".CMDP>" send "   ccc tolower\r";c
   expect ".CMDP>" send "   ccc toupper\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label libtsk\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $ifnx lib.tsk/s\r";c
   expect ".CMDP>" send "      $write\r";c
   expect ".CMDP>" send "      $write BUILDING LIB.TSK/S ........\r";c
   expect ".CMDP>" send "      $write\r";c
   expect ".CMDP>" send "      set group 25\r";c
   expect ".CMDP>" send "      xdelete lib.c,lib.tsk,lib.css\r";c
   expect ".CMDP>" send "      copy lib.c/g,lib.c/p\r";c
   expect ".CMDP>" send "      cccl lib,strchr.obj,stricmp.obj,toupper.obj\r";c
   expect ".CMDP>" send "      rename lib.tsk,lib.tsk/s\r";c
   expect ".CMDP>" send "      delete lib.c,lib.css\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label library\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write CREATING LIBRARY ........\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   xdelete libfix.lib\r";c
   expect ".CMDP>" send "   lib create libfix\r";c
   expect ".CMDP>" send "   lib add libfix atoi\r";c
   expect ".CMDP>" send "   lib add libfix ltrim\r";c
   expect ".CMDP>" send "   lib add libfix memcmp\r";c
   expect ".CMDP>" send "   lib add libfix rtrim\r";c
   expect ".CMDP>" send "   lib add libfix strchr\r";c
   expect ".CMDP>" send "   lib add libfix stricmp\r";c
   expect ".CMDP>" send "   lib add libfix stristr\r";c
   expect ".CMDP>" send "   lib add libfix strnicmp\r";c
   expect ".CMDP>" send "   lib add libfix strrchr\r";c
   expect ".CMDP>" send "   lib add libfix tolower\r";c
   expect ".CMDP>" send "   lib add libfix toupper\r";c
   expect ".CMDP>" send "   lib list libfix\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label test\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write RUNNING TESTS ........\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   ccc test\r";c
   expect ".CMDP>" send "   ccl test,libfix.lib\r";c
   expect ".CMDP>" send "   test\r";c
   expect ".CMDP>" send "   xdel test.css\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label done\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write DONE!\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "$label clean\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   $write Removing LIBFIX.LIB file ........\r";c
   expect ".CMDP>" send "   xdelete libfix.lib\r";c
   expect ".CMDP>" send "   $write Removing TEST.TSK file ........\r";c
   expect ".CMDP>" send "   xdelete test.tsk\r";c
   expect ".CMDP>" send "   $write Removing .OBJ files ........\r";c
   expect ".CMDP>" send "   wild del,-.obj\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename make.css,make.css/24\r";c
   # MEMCMP.C/24
   expect "\r\n*" send "alloc memcmp.c,in,80 ; build memcmp.c,append\r";c
   expect ".CMDP>" send "int memcmp(p1,p2,len)\r";c
   expect ".CMDP>" send "   char *p1, *p2;\r";c
   expect ".CMDP>" send "   int len;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while (--len > 0 && *p1 == *p2)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      p1++;\r";c
   expect ".CMDP>" send "      p2++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return (*p1-*p2);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename memcmp.c,memcmp.c/24\r";c
   # RTRIM.C/24
   expect "\r\n*" send "alloc rtrim.c,in,80 ; build rtrim.c,append\r";c
   expect ".CMDP>" send "char *rtrim (str)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *p = str;\r";c
   expect ".CMDP>" send "   while (*p) p++;\r";c
   expect ".CMDP>" send "   while (p >= str && *p <= ' ') *p-- = 0;\r";c
   expect ".CMDP>" send "   return (str);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename rtrim.c,rtrim.c/24\r";c
   # STRCHR.C/24
   expect "\r\n*" send "alloc strchr.c,in,80 ; build strchr.c,append\r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char *strchr(str,c)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while (*str)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (*str == c) return str;\r";c
   expect ".CMDP>" send "      str++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return *str == c ? str : NULL;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename strchr.c,strchr.c/24\r";c
   # STRICMP.C/24
   expect "\r\n*" send "alloc stricmp.c,in,80 ; build stricmp.c,append\r";c
   expect ".CMDP>" send "int stricmp(s1,s2)\r";c
   expect ".CMDP>" send "   char *s1;\r";c
   expect ".CMDP>" send "   char *s2;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while ( *s1 && *s2 )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      int diff = toupper(*s1) - toupper(*s2);\r";c
   expect ".CMDP>" send "      if (diff) return diff;\r";c
   expect ".CMDP>" send "      s1++;\r";c
   expect ".CMDP>" send "      s2++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return *s1 - *s2;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename stricmp.c,stricmp.c/24\r";c
   # STRISTR.C/24
   expect "\r\n*" send "alloc stristr.c,in,80 ; build stristr.c,append\r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char *stristr (haystack,needle)\r";c
   expect ".CMDP>" send "   char *haystack;\r";c
   expect ".CMDP>" send "   char *needle;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *hs, *p, *q;\r";c
   expect ".CMDP>" send "   if (!*needle) return strchr(haystack,0);\r";c
   expect ".CMDP>" send "   for (hs=haystack; *hs; hs++)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (toupper(*hs) == toupper(*needle))\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         p = needle;\r";c
   expect ".CMDP>" send "         q = hs;\r";c
   expect ".CMDP>" send "         while ( *p > 0 &&\r";c
   expect ".CMDP>" send "                 *q > 0 &&\r";c
   expect ".CMDP>" send "                 toupper(*p) == toupper(*q) )\r";c
   expect ".CMDP>" send "         {\r";c
   expect ".CMDP>" send "            p++;\r";c
   expect ".CMDP>" send "            q++;\r";c
   expect ".CMDP>" send "         }\r";c
   expect ".CMDP>" send "         if (*p == 0) return (hs);\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return NULL;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename stristr.c,stristr.c/24\r";c
   # STRNICMP.C/24
   expect "\r\n*" send "alloc strnicmp.c,in,80 ; build strnicmp.c,append\r";c
   expect ".CMDP>" send "int strnicmp(s1,s2,n)\r";c
   expect ".CMDP>" send "   char *s1, *s2;\r";c
   expect ".CMDP>" send "   int n;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while (n > 0 && *s1 != 0 && *s2 != 0)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      int diff = toupper(*s1) - toupper(*s2);\r";c
   expect ".CMDP>" send "      if (diff) return diff;\r";c
   expect ".CMDP>" send "      s1++;\r";c
   expect ".CMDP>" send "      s2++;\r";c
   expect ".CMDP>" send "      n--;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   if (n > 0)\r";c
   expect ".CMDP>" send "      return toupper(*s1) - toupper(*s2);\r";c
   expect ".CMDP>" send "   else\r";c
   expect ".CMDP>" send "      return 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename strnicmp.c,strnicmp.c/24\r";c
   # STRRCHR.C/24
   expect "\r\n*" send "alloc strrchr.c,in,80 ; build strrchr.c,append\r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char *strrchr(str,c)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *p;\r";c
   expect ".CMDP>" send "   for (p=str; *p; p++) ;\r";c
   expect ".CMDP>" send "   while (p >= str)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (*p == c) return (p);\r";c
   expect ".CMDP>" send "      p--;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return (NULL);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename strrchr.c,strrchr.c/24\r";c
   # TEST.C/24
   expect "\r\n*" send "alloc test.c,in,80 ; build test.c,append\r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "main()\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   printf (\"\\n\\n\");\r";c
   expect ".CMDP>" send "   if ( tatoi (\"42\", 42) &&\r";c
   expect ".CMDP>" send "        tatoi (\"-42\", -42) &&\r";c
   expect ".CMDP>" send "        tmemcmp (\"abc\", \"abcde\", 3,  0) &&\r";c
   expect ".CMDP>" send "        tmemcmp (\"abcde\", \"abc\", 3,  0) &&\r";c
   expect ".CMDP>" send "        tmemcmp (\"abd\",   \"abc\", 3, +1) &&\r";c
   expect ".CMDP>" send "        tmemcmp (\"aac\",   \"abc\", 3, -1) &&\r";c
   expect ".CMDP>" send "        tstrchr (\"abcdecde\", 'c',  \"cdecde\") &&\r";c
   expect ".CMDP>" send "        tstrchr (\"abcdecde\",  0,   \"\") &&\r";c
   expect ".CMDP>" send "        tstrchr (\"abcdecde\", 'x',  NULL) &&\r";c
   expect ".CMDP>" send "        tstrrchr (\"abcdecde\", 'c', \"cde\") &&\r";c
   expect ".CMDP>" send "        tstrrchr (\"abcdecde\", 0,   \"\") &&\r";c
   expect ".CMDP>" send "        tstrrchr (\"abcdecde\", 'x', NULL) &&\r";c
   expect ".CMDP>" send "        tstristr (\"abcde\", \"DE\", \"de\") &&\r";c
   expect ".CMDP>" send "        tstristr (\"abcde\", \"\", \"\") &&\r";c
   expect ".CMDP>" send "        tstristr (\"abcde\", \"xyz\", NULL) &&\r";c
   expect ".CMDP>" send "        tstricmp (\"abc\", \"ab\", +1) &&\r";c
   expect ".CMDP>" send "        tstricmp (\"abc\", \"abc\", 0) &&\r";c
   expect ".CMDP>" send "        tstricmp (\"ABC\", \"abc\", 0) &&\r";c
   expect ".CMDP>" send "        tstrnicmp (\"abc\", \"ABCDE\", 3, 0) &&\r";c
   expect ".CMDP>" send "        tstrnicmp (\"abcde\", \"ABC\", 3, 0) &&\r";c
   expect ".CMDP>" send "        tstrnicmp (\"abd\", \"ABC\", 3, +1) &&\r";c
   expect ".CMDP>" send "        tstrnicmp (\"aac\", \"ABC\", 3, -1) &&\r";c
   expect ".CMDP>" send "        tltrim (\" \\t abc\", \"abc\") &&\r";c
   expect ".CMDP>" send "        tltrim (\"xyz\", \"xyz\") &&\r";c
   expect ".CMDP>" send "        trtrim (\"abc \\t \", \"abc\") &&\r";c
   expect ".CMDP>" send "        trtrim (\"xyz\", \"xyz\") )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"\\n All tests PASSED\\n\\n\");\r";c
   expect ".CMDP>" send "      return (0);\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   else\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"\\n\");\r";c
   expect ".CMDP>" send "      return (1);\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "sign(num)\r";c
   expect ".CMDP>" send "   int num;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (num == 0) return 0;\r";c
   expect ".CMDP>" send "   if (num < 0) return -1;\r";c
   expect ".CMDP>" send "   if (num > 0) return 1;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tatoi(str,exp)\r";c
   expect ".CMDP>" send "  char *str;\r";c
   expect ".CMDP>" send "  int exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int ret = atoi(str);\r";c
   expect ".CMDP>" send "   char *pf = ret == exp ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s atoi(\\\"%%s\\\") = %%d\\n\", pf, str, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tmemcmp(s1,s2,n,exp)\r";c
   expect ".CMDP>" send "   char *s1, *s2;\r";c
   expect ".CMDP>" send "   int n, exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int ret;\r";c
   expect ".CMDP>" send "   char *pf;\r";c
   expect ".CMDP>" send "   ret = memcmp(s1,s2,n);;\r";c
   expect ".CMDP>" send "   pf = sign(ret) == sign(exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s memcmp(\\\"%%s\\\",\\\"%%s\\\",%%d) = %%d\\n\", pf, s1, s2, n, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstrchr(s,c,exp)\r";c
   expect ".CMDP>" send "   char *s, *exp;\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *pf, *ret=strchr(s,c);\r";c
   expect ".CMDP>" send "        if (exp == NULL && ret == NULL) pf = \" PASS \";\r";c
   expect ".CMDP>" send "   else if (exp == NULL || ret == NULL) pf = \"*FAIL*\";\r";c
   expect ".CMDP>" send "   else pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s strchr(\\\"%%s\\\",'%%c') = %%s\\n\", pf, s, c, ret?ret:\"NULL\");\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstrrchr(s,c,exp)\r";c
   expect ".CMDP>" send "   char *s, *exp;\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *pf, *ret=strrchr(s,c);\r";c
   expect ".CMDP>" send "        if (exp == NULL && ret == NULL) pf = \" PASS \";\r";c
   expect ".CMDP>" send "   else if (exp == NULL || ret == NULL) pf = \"*FAIL*\";\r";c
   expect ".CMDP>" send "   else pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s strrchr(\\\"%%s\\\",'%%c') = %%s\\n\", pf, s, c, ret?ret:\"NULL\");\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstristr(s1,s2,exp)\r";c
   expect ".CMDP>" send "   char *s1, *s2, *exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *ret, *pf;\r";c
   expect ".CMDP>" send "   ret = stristr(s1,s2);\r";c
   expect ".CMDP>" send "        if (ret == NULL && exp == NULL) pf = \" PASS \";\r";c
   expect ".CMDP>" send "   else if (ret == NULL || exp == NULL) pf = \"*FAIL*\";\r";c
   expect ".CMDP>" send "   else pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s stristr(\\\"%%s\\\",\\\"%%s\\\") = %%s\\n\", pf, s1, s2, ret?ret:\"NULL\");\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstricmp(s1,s2,exp)\r";c
   expect ".CMDP>" send "   char *s1, *s2;\r";c
   expect ".CMDP>" send "   int exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int ret;\r";c
   expect ".CMDP>" send "   char *pf;\r";c
   expect ".CMDP>" send "   ret = stricmp(s1,s2);;\r";c
   expect ".CMDP>" send "   pf = sign(ret) == sign(exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s stricmp(\\\"%%s\\\",\\\"%%s\\\") = %%d\\n\", pf, s1, s2, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tstrnicmp(s1,s2,n,exp)\r";c
   expect ".CMDP>" send "   char *s1, *s2;\r";c
   expect ".CMDP>" send "   int n, exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int ret;\r";c
   expect ".CMDP>" send "   char *pf;\r";c
   expect ".CMDP>" send "   ret = strnicmp(s1,s2,n);;\r";c
   expect ".CMDP>" send "   pf = sign(ret) == sign(exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s strnicmp(\\\"%%s\\\",\\\"%%s\\\",%%d) = %%d\\n\", pf, s1, s2, n, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "tltrim (str,exp)\r";c
   expect ".CMDP>" send "   char *str, *exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char buf[10], *ret, *pf;\r";c
   expect ".CMDP>" send "   strcpy (buf, str);\r";c
   expect ".CMDP>" send "   ret = ltrim(buf);\r";c
   expect ".CMDP>" send "   pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s ltrim(\\\"%%s\\\") = \\\"%%s\\\"\\n\", pf, str, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "trtrim (str,exp)\r";c
   expect ".CMDP>" send "   char *str, *exp;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char buf[10], *ret, *pf;\r";c
   expect ".CMDP>" send "   strcpy (buf, str);\r";c
   expect ".CMDP>" send "   ret = rtrim(buf);\r";c
   expect ".CMDP>" send "   pf = !strcmp(ret,exp) ? \" PASS \" : \"*FAIL*\";\r";c
   expect ".CMDP>" send "   printf (\"%%s rtrim(\\\"%%s\\\") = \\\"%%s\\\"\\n\", pf, str, ret);\r";c
   expect ".CMDP>" send "   return strcmp(pf,\" PASS \") == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename test.c,test.c/24\r";c
   # TOLOWER.C/24
   expect "\r\n*" send "alloc tolower.c,in,80 ; build tolower.c,append\r";c
   expect ".CMDP>" send "int tolower(c)\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (c >= 'A' && c <= 'Z') return c + ('a'-'A');\r";c
   expect ".CMDP>" send "   else return c;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename tolower.c,tolower.c/24\r";c
   # TOUPPER.C/24
   expect "\r\n*" send "alloc toupper.c,in,80 ; build toupper.c,append\r";c
   expect ".CMDP>" send "int toupper(c)\r";c
   expect ".CMDP>" send "   int c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (c >= 'a' && c <= 'z') return c - ('a'-'A');\r";c
   expect ".CMDP>" send "   else return c;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename toupper.c,toupper.c/24\r";c
   # shutdown
   expect "\r\n*"  send "mark dsc4:,off ; display devices\r";c
   expect "DSC5  FE 0000   OFF" detach dm0 ; echo ; echo ; exit 0

   boot dm0
   exit 1

