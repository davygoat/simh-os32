# vim:set syntax=sh:
# vim:set nowrap:

:startup-shutdown-scripts

   echo
   echo
   echo
   echo
   echo ************* STAGE 5 - STARTUP/SHUTDOWN AND CSS SCRIPTS *************
   echo
   echo
   echo

   set cpu 832
   set cpu idle
   set ttp enabled
   set pas devno=20
   set dm0 msm80
   set environ DATE=%DATE_MM%/%DATE_DD%/%DATE_YY%
   set environ TIME=%TIME_HH%:%TIME_MM%
   send delay=10000

   attach -e dm0 os32.dsk

   deposit 7c 002

   noexpect
   expect "ENTER DATE AND TIME" send "set time %DATE%,%TIME%\r";c
   expect "*";c
   expect "*" send "mark dsc4:,on\r";c
   expect "DSC4:  SYS" send "volume sys\r";c
   expect "*";c
   expect "*" send "volume sys/temp\r";c
   # SYSONLY.CSS
   expect "\r\n*" send "build sysonly.css\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   display tasks ,null:\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   $write THIS COMMAND ONLY WORKS AT THE SYSTEM CONSOLE\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # MTMONLY.CSS
   expect "\r\n*" send "build mtmonly.css\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   display users ,null:\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   $write THIS COMMAND ONLY WORKS IN MTM\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # STARTUP.CSS
   expect "\r\n*" send "build startup.css\r";c
   expect ".CMDP>" send "sysonly\r";c
   expect ".CMDP>" send "volume sys/temp\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "*   mark dsc3:,on\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   $write *** DSC3 IS BROKEN, USE SIMH 'DO FIXDISK' TO RECOVER ***\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "$ifx splup.css\r";c
   expect ".CMDP>" send "   splup ; $wait 1\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "mtmup ; $wait 1\r";c
   expect ".CMDP>" send "display tasks\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # MTMUP.CSS
   expect "\r\n*" send "build mtmup.css\r";c
   expect ".CMDP>" send "sysonly\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   $write STARTING MTM\r";c
   expect ".CMDP>" send "   load .mtm,mtmmac\r";c
   expect ".CMDP>" send "   task .mtm\r";c
   expect ".CMDP>" send "   start ,auf=users.auf,atf=null:\r";c
   expect ".CMDP>" send "   $wait 1\r";c
   expect ".CMDP>" send "   .mtm add t020:\r";c
   expect ".CMDP>" send "   .mtm add t022:\r";c
   expect ".CMDP>" send "   .mtm add t024:\r";c
   expect ".CMDP>" send "   .mtm add t026:\r";c
   expect ".CMDP>" send "   .mtm add t028:\r";c
   expect ".CMDP>" send "   .mtm add t02a:\r";c
   expect ".CMDP>" send "   .mtm add t02c:\r";c
   expect ".CMDP>" send "   .mtm add t02e:\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   $write NO PROBLEM, MTM ALREADY RUNNING\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # MTMDOWN.CSS
   expect "\r\n*" send "build mtmdown.css\r";c
   expect ".CMDP>" send "sysonly\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   $write STOPPING MTM\r";c
   expect ".CMDP>" send "   cancel .mtm\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   $write NO PROBLEM, MTM PROBABLY NOT RUNNING\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
# uncomment for experimental SPL/32 support
#  # SPLUP.CSS
#  expect "\r\n*" send "build splup.css\r";c
#  expect ".CMDP>" send "sysonly\r";c
#  expect ".CMDP>" send "$job\r";c
#  expect ".CMDP>" send "   $write STARTING SPL/32\r";c
#  expect ".CMDP>" send "   load spl32\r";c
#  expect ".CMDP>" send "   task spl32\r";c
#  expect ".CMDP>" send "   start\r";c
#  expect ".CMDP>" send "   $wait 1\r";c
#  expect ".CMDP>" send "$termjob\r";c
#  expect ".CMDP>" send "$ifne 0\r";c
#  expect ".CMDP>" send "   $write NO PROBLEM, SPL/32 ALREADY RUNNING\r";c
#  expect ".CMDP>" send "$endc\r";c
#  expect ".CMDP>" send "$exit\r";c
#  expect ".CMDP>" send "endb\r";c
#  # SPLDOWN.CSS
#  expect "\r\n*" send "build spldown.css\r";c
#  expect ".CMDP>" send "sysonly\r";c
#  expect ".CMDP>" send "$job\r";c
#  expect ".CMDP>" send "   $write STOPPING SPL/32\r";c
#  expect ".CMDP>" send "   cancel spl32\r";c
#  expect ".CMDP>" send "$termjob\r";c
#  expect ".CMDP>" send "$ifne 0\r";c
#  expect ".CMDP>" send "   $write NO PROBLEM, SPL/32 PROBABLY NOT RUNNING\r";c
#  expect ".CMDP>" send "$endc\r";c
#  expect ".CMDP>" send "$exit\r";c
#  expect ".CMDP>" send "endb\r";c
   # SHUTDOWN.CSS
   expect "\r\n*" send "build shutdown.css\r";c
   expect ".CMDP>" send "sysonly\r";c
   expect ".CMDP>" send "$write MARKING NON SYSTEM DISKS OFF\r";c
   expect ".CMDP>" send "mark dsc0:,off\r";c
   expect ".CMDP>" send "mark dsc1:,off\r";c
   expect ".CMDP>" send "mark dsc2:,off\r";c
   expect ".CMDP>" send "mark dsc3:,off\r";c
   expect ".CMDP>" send "mark dsc5:,off\r";c
   expect ".CMDP>" send "mtmdown ; $wait 1\r";c
   expect ".CMDP>" send "$ifx spldown.css\r";c
   expect ".CMDP>" send "   spldown ; $wait 1\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "$write MARK DSC4 OFF BEFORE YOU GO\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # DIR.CSS
   expect "\r\n*" send "build dir.css\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "$ifnnull @1\r";c
   expect ".CMDP>" send "   display files ,@1\r";c
   expect ".CMDP>" send "$else\r";c
   expect ".CMDP>" send "   display files\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # COPY.CSS
   expect "\r\n*" send "build copy.css\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnull @1\r";c
   expect ".CMDP>" send "   $write USAGE: COPY FROM,TO\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnx @1\r";c
   expect ".CMDP>" send "   $write FILE NOT FOUND\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifx @2\r";c
   expect ".CMDP>" send "   $write OUTPUT FILE ALREADY EXISTS\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   $build copy.tmp\r";c
   expect ".CMDP>" send "      option noterm,nopsfm\r";c
   expect ".CMDP>" send "      copy @1,@2\r";c
   expect ".CMDP>" send "      end\r";c
   expect ".CMDP>" send "   $endb\r";c
   expect ".CMDP>" send "   load .bg,copy32; task .bg; start ,command=copy.tmp\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "xdelete copy.tmp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "endb\r";c
   # TYPE.CSS
   expect "\r\n*" send "build type.css\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnull @1\r";c
   expect ".CMDP>" send "   $write USAGE: TYPE FD\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnx @1\r";c
   expect ".CMDP>" send "   $write FILE NOT FOUND\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   $build type.tmp\r";c
   expect ".CMDP>" send "      option noterm,nopsfm\r";c
   expect ".CMDP>" send "      copy @1,con:\r";c
   expect ".CMDP>" send "      end\r";c
   expect ".CMDP>" send "   $endb\r";c
   expect ".CMDP>" send "   load .bg,copy32; task .bg; start ,command=type.tmp\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "xdelete type.tmp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "endb\r";c
   # HEX.CSS
   expect "\r\n*" send "build hex.css\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnull @1\r";c
   expect ".CMDP>" send "   $write MISSING FILENAME\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnx @1\r";c
   expect ".CMDP>" send "   $write FILE NOT FOUND\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$define 2,,filename(@1)string(.hex)\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "xdelete hex.tmp\r";c
   expect ".CMDP>" send "xdelete @*2\r";c
   expect ".CMDP>" send "alloc @*2,in,80\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$build hex.tmp\r";c
   expect ".CMDP>" send "   list @*2\r";c
   expect ".CMDP>" send "   display @1\r";c
   expect ".CMDP>" send "   end\r";c
   expect ".CMDP>" send "$endb\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   load copy32\r";c
   expect ".CMDP>" send "   start ,command=hex.tmp\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   xdelete hex.tmp\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$end\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "xdelete hex.tmp\r";c
   expect ".CMDP>" send "display files ,@*2\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "endb\r";c
   # WHOAMI.CSS
   expect "\r\n*" send "build whoami.css\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   $define 1,,cur(user)\r";c
   expect ".CMDP>" send "   $write @*1\r";c
   expect ".CMDP>" send "$term\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   $write NO PROBLEM, YOU ARE AT THE SYSTEM CONSOLE\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # WILD.CSS/25
   expect "\r\n*" send "build wild.css\r";c
   expect ".CMDP>" send "sys:wild/s \"@1\",@2\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "repro wild.css,ff00 ; rename wild.css,wild.css/25\r";c
   # SEARCH.CSS/25
   expect "\r\n*" send "build search.css\r";c
   expect ".CMDP>" send "sys:search/s @1,\"@2\",,@4\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "repro search.css,ff00 ; rename search.css,search.css/25\r";c
   # WILD.CSS
   expect "\r\n*" send "build wild.css\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "mtmonly\r";c
   expect ".CMDP>" send "$ifnx sys:wild.tsk/s\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write CANNOT FIND WILD.TSK\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "* Check parameters present\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnull @1\r";c
   expect ".CMDP>" send "   load sys:wild,10\r";c
   expect ".CMDP>" send "   task wild\r";c
   expect ".CMDP>" send "   start\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "$ifnull @2\r";c
   expect ".CMDP>" send "   load sys:wild,10\r";c
   expect ".CMDP>" send "   task wild\r";c
   expect ".CMDP>" send "   start\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$end\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "* Use DISPLAY FILES to write WILD.TSK input\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   xalloc wildin.tmp,index,80\r";c
   expect ".CMDP>" send "   xalloc wildtmp.css,index,128\r";c
   expect ".CMDP>" send "   display files ,@2,wildin.tmp\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   xdelete wildin.tmp\r";c
   expect ".CMDP>" send "   xdelete wildtmp.css\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "* Convert to CSS using WILD.TSK\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "   load sys:wild,10\r";c
   expect ".CMDP>" send "   task wild\r";c
   expect ".CMDP>" send "   assign 0,wildin.tmp,ero\r";c
   expect ".CMDP>" send "   assign 1,wildtmp.css,ewo\r";c
   expect ".CMDP>" send "   start ,\"@1\",@2\r";c
   expect ".CMDP>" send "$termjob\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   xdelete wildin.css\r";c
   expect ".CMDP>" send "   xdelete wildtmp.css\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "* Run CSS\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "wildtmp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "* Cleanup\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "xdelete wildin.tmp\r";c
   expect ".CMDP>" send "xdelete wildtmp.css\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # SEARCH.CSS
   expect "\r\n*" send "build search.css\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnx sys:search.tsk/s\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write CANNOT FIND SEARCH.TSK\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $clear\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnnull @4\r";c
   expect ".CMDP>" send "   $goto dofile\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** WILDCARD *************************************\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "mtmonly\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnull @1\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write USAGE: SEARCH WILDCARD,\"STRING\"\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write NOTE:  TO SEARCH FOR $, USE $$\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$ifnull @2\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write USAGE: SEARCH WILDCARD,\"STRING\"\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write NOTE:  TO SEARCH FOR $, USE $$\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "wild \"search $V:$F,@2,,go\",@1\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** SINGLE FILE **********************************\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$label dofile\r";c
   expect ".CMDP>" send "$job\r";c
   expect ".CMDP>" send "prevent etm\r";c
   expect ".CMDP>" send "   load .bg,sys:search,10\r";c
   expect ".CMDP>" send "   task .bg\r";c
   expect ".CMDP>" send "   assign 0,@1,sro\r";c
   expect ".CMDP>" send "   assign 1,con:\r";c
   expect ".CMDP>" send "   assign 2,con:\r";c
   expect ".CMDP>" send "   start ,@1,\"@2\"\r";c
   expect ".CMDP>" send "$term\r";c
   expect ".CMDP>" send "$ifne 0\r";c
   expect ".CMDP>" send "   cancel\r";c
   expect ".CMDP>" send "   $write ==== @1 ==============================================\r";c
   expect ".CMDP>" send "   $write THERE WAS A PROBLEM READING @1\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # WILD.C/25
   expect "\r\n*" send "build wild.c\r";c
   expect ".CMDP>" send "/*\r";c
   expect ".CMDP>" send " * This program converts fixed-format DISPLAY FILES output into a\r";c
   expect ".CMDP>" send " * CSS script that operates on those files, for example to delete\r";c
   expect ".CMDP>" send " * object files and other such clutter en masse. OS/32 does not\r";c
   expect ".CMDP>" send " * make that sort of thing terribly easy.\r";c
   expect ".CMDP>" send " */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send "#include <ctype.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "#define strchr(s,c) index((s),(c))\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int usage()\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   printf (\"\\n\\n\");\r";c
   expect ".CMDP>" send "   printf (\"Usage: WILD \\\"command\\\",wildcard\\n\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   'command' is an OS/32 command or CSS \");\r";c
   expect ".CMDP>" send "   printf (\"to run on each file.\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   'wildcard' is an OS/32 wildcard pattern.\\n\\n\");\r";c
   expect ".CMDP>" send "   printf (\"Placeholders:\\n\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $V  volume\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $N  file NAME\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $X  extension\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $A  account (/P, /G, or /S)\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $F  file name, extension and account\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $T  type\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $D  dbs\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $I  ibs\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $L  record LENGTH\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $R  records\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $C  created date (ctime)\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $W  written date (mtime)\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $K  keys (protection)\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $:  semicolon\\n\");\r";c
   expect ".CMDP>" send "   printf (\"   $$  dollar sign\\n\");\r";c
   expect ".CMDP>" send "   printf (\"\\n\");\r";c
   expect ".CMDP>" send "   return (1);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int memcmp(p1,p2,len)\r";c
   expect ".CMDP>" send "   char *p1, *p2;\r";c
   expect ".CMDP>" send "   int len;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while (--len > 0 && *p1 == *p2)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      p1++;\r";c
   expect ".CMDP>" send "      p2++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return (*p1-*p2);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char *rtrim (str)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *p = str;\r";c
   expect ".CMDP>" send "   while (*p) p++;\r";c
   expect ".CMDP>" send "   while (p >= str && *p <= ' ') *p-- = 0;\r";c
   expect ".CMDP>" send "   return (str);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int toupper(ch)\r";c
   expect ".CMDP>" send "   int ch;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (islower(ch)) ch -= 'a' - 'A';\r";c
   expect ".CMDP>" send "   return (ch);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int main (argc, argv)\r";c
   expect ".CMDP>" send "   int argc;\r";c
   expect ".CMDP>" send "   char **argv;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char line[90], *p;\r";c
   expect ".CMDP>" send "   char volbuf[80], *vol;\r";c
   expect ".CMDP>" send "   char *cmd, *wild, *act;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (argc < 3) return usage();\r";c
   expect ".CMDP>" send "   cmd = argv[1];\r";c
   expect ".CMDP>" send "   wild = argv[2];\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   act = strchr (wild, '/');\r";c
   expect ".CMDP>" send "   if (act) act++;\r";c
   expect ".CMDP>" send "   else act = \"P\";\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   while ( fgets(line,sizeof(line),stdin) && !feof(stdin) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      int dolcnt = 0;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "      char *nam = line+1;\r";c
   expect ".CMDP>" send "      char *ext = line+10;\r";c
   expect ".CMDP>" send "      char *typ = line+20;\r";c
   expect ".CMDP>" send "      char *dbs = line+23;\r";c
   expect ".CMDP>" send "      char *ibs = line+27;\r";c
   expect ".CMDP>" send "      char *len = line+31;\r";c
   expect ".CMDP>" send "      char *rex = line+37;\r";c
   expect ".CMDP>" send "      char *cre = line+45;\r";c
   expect ".CMDP>" send "      char *wri = line+60;\r";c
   expect ".CMDP>" send "      char *key = line+75;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "      if (!memcmp(line,\"VOLUME=\",7))\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         strcpy (vol=volbuf, rtrim(line+7));\r";c
   expect ".CMDP>" send "         while (*vol > 0 && *vol <= ' ') vol++;\r";c
   expect ".CMDP>" send "         continue;\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      if (!memcmp(line,\" FILENAME...\",12)) continue;\r";c
   expect ".CMDP>" send "      if (*line != ' ')\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         fprintf (stderr, \"%%s\", line);\r";c
   expect ".CMDP>" send "         exit (1);\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "      nam[8] = ext[3] = typ[2] = dbs[3] = ibs[3] = 0;\r";c
   expect ".CMDP>" send "      len[5] = rex[7] = cre[14] = wri[14] = key[4] = 0;\r";c
   expect ".CMDP>" send "      rtrim (ext);\r";c
   expect ".CMDP>" send "      rtrim (nam);\r";c
   expect ".CMDP>" send "      while (*dbs != 0 && *dbs <= ' ') dbs++;\r";c
   expect ".CMDP>" send "      while (*ibs != 0 && *ibs <= ' ') ibs++;\r";c
   expect ".CMDP>" send "      while (*rex != 0 && *rex <= ' ') rex++;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "      for (p=cmd; *p; p++)\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         if (*p == '$')\r";c
   expect ".CMDP>" send "         {\r";c
   expect ".CMDP>" send "            switch (toupper(p[1]))\r";c
   expect ".CMDP>" send "            {\r";c
   expect ".CMDP>" send "               case 'V':  printf(\"%%s\",vol); p++; break;;\r";c
   expect ".CMDP>" send "               case 'N':  printf(\"%%s\",nam); p++; break;;\r";c
   expect ".CMDP>" send "               case 'X':  printf(\"%%s\",ext); p++; break;;\r";c
   expect ".CMDP>" send "               case 'A':  printf(\"%%s\",act); p++; break;;\r";c
   expect ".CMDP>" send "               case 'T':  printf(\"%%s\",typ); p++; break;;\r";c
   expect ".CMDP>" send "               case 'D':  printf(\"%%s\",dbs); p++; break;;\r";c
   expect ".CMDP>" send "               case 'I':  printf(\"%%s\",ibs); p++; break;;\r";c
   expect ".CMDP>" send "               case 'L':  printf(\"%%s\",len); p++; break;;\r";c
   expect ".CMDP>" send "               case 'R':  printf(\"%%s\",rex); p++; break;;\r";c
   expect ".CMDP>" send "               case 'C':  printf(\"%%s\",cre); p++; break;;\r";c
   expect ".CMDP>" send "               case 'W':  printf(\"%%s\",wri); p++; break;;\r";c
   expect ".CMDP>" send "               case 'K':  printf(\"%%s\",key); p++; break;;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "               case 'F':\r";c
   expect ".CMDP>" send "                  printf (\"%%s.%%s/%%s\", nam, ext, act);\r";c
   expect ".CMDP>" send "                  p++;\r";c
   expect ".CMDP>" send "                  break;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "               case ':':\r";c
   expect ".CMDP>" send "                  putchar (';');\r";c
   expect ".CMDP>" send "                  p++;\r";c
   expect ".CMDP>" send "                  break;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "               case '$':\r";c
   expect ".CMDP>" send "                  putchar ('$');\r";c
   expect ".CMDP>" send "                  p++;\r";c
   expect ".CMDP>" send "                  break;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "               default:\r";c
   expect ".CMDP>" send "                  fprintf (stderr, \"Invalid placeholder '%%c'\\n\", *p);\r";c
   expect ".CMDP>" send "                  exit (1);\r";c
   expect ".CMDP>" send "            }\r";c
   expect ".CMDP>" send "            dolcnt++;\r";c
   expect ".CMDP>" send "         }\r";c
   expect ".CMDP>" send "         else\r";c
   expect ".CMDP>" send "            putchar (*p);\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      if (dolcnt == 0) printf (\" %%s.%%s/%%s\", nam, ext, act);\r";c
   expect ".CMDP>" send "      putchar ('\\n');\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   printf (\"$exit\\n\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   return (0);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename wild.c,wild.c/25\r";c
   # SEARCH.C/25
   expect "\r\n*" send "build search.c\r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send "#include <ctype.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int toupper(ch)\r";c
   expect ".CMDP>" send "   int ch;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (islower(ch)) ch -= 'a' - 'A';\r";c
   expect ".CMDP>" send "   return (ch);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char *stristr (haystack,needle)\r";c
   expect ".CMDP>" send "   char *haystack;\r";c
   expect ".CMDP>" send "   char *needle;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *hs, *p, *q;\r";c
   expect ".CMDP>" send "   for (hs=haystack; *hs; hs++)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (toupper(*hs) == toupper(*needle))\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         p = needle;\r";c
   expect ".CMDP>" send "         q = hs;\r";c
   expect ".CMDP>" send "         while ( *p > 0 &&\r";c
   expect ".CMDP>" send "                 *q > 0 &&\r";c
   expect ".CMDP>" send "                 toupper(*p) == toupper(*q) )\r";c
   expect ".CMDP>" send "         {\r";c
   expect ".CMDP>" send "            p++;\r";c
   expect ".CMDP>" send "            q++;\r";c
   expect ".CMDP>" send "         }\r";c
   expect ".CMDP>" send "         if (*p == 0) return (hs);\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return (NULL);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int main (argc,argv)\r";c
   expect ".CMDP>" send "   int argc;\r";c
   expect ".CMDP>" send "   char **argv;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *fnam, *str, line[256];\r";c
   expect ".CMDP>" send "   int lc, mc, i;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (argc < 3)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      fprintf (stderr, \"Usage: $ search FILENAME,STRING\\n\");\r";c
   expect ".CMDP>" send "      exit (0);\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   fnam = argv[1];\r";c
   expect ".CMDP>" send "   str = argv[2];\r";c
   expect ".CMDP>" send "   lc = mc = 0;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   while ( fgets(line,sizeof(line),stdin) && !feof(stdin) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      lc++;\r";c
   expect ".CMDP>" send "      if (stristr(line,str))\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         if (!mc++)\r";c
   expect ".CMDP>" send "         {\r";c
   expect ".CMDP>" send "            printf (\"\\n\\n====== \");\r";c
   expect ".CMDP>" send "            printf (\"%%s \", fnam);\r";c
   expect ".CMDP>" send "            for (i=71-strlen(fnam); i>0; i--) putc ('=', stdout);\r";c
   expect ".CMDP>" send "            printf (\"\\n\\n\");\r";c
   expect ".CMDP>" send "         }\r";c
   expect ".CMDP>" send "         printf (\"%%6d %%s\", lc, line);\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (mc > 0)\r";c
   expect ".CMDP>" send "      printf (\"\\nFound %%d matches for \\\"%%s\\\".\", mc, str);\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   return (0);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename search.c,search.c/25\r";c
   # FTP.CSS
   expect "\r\n*" send "build ftp.css\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "sysonly\r";c
   expect ".CMDP>" send "$ifnull @1\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write OPERATOR COMMANDS ARE:\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write FTP ON\r";c
   expect ".CMDP>" send "   $write FTP OFF\r";c
   expect ".CMDP>" send "   $write FTP RESET\r";c
   expect ".CMDP>" send "   $write FTP USERS\r";c
   expect ".CMDP>" send "   $write FTP ADDUSER\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $write ALL OTHER COMMANDS ARE RESERVED FOR THE FTP SERVER.\r";c
   expect ".CMDP>" send "   $write\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "xdelete users.ftp,reset.ftp\r";c
   expect ".CMDP>" send "xdelete off.ftp,down.ftp,stop.ftp\r";c
   expect ".CMDP>" send "xdelete on.ftp,up.ftp,start.ftp\r";c
   expect ".CMDP>" send "xdelete copyout.ftp,copyin.ftp\r";c
   expect ".CMDP>" send "xdelete delete.ftp,rename.ftp\r";c
   expect ".CMDP>" send "xdelete dir.ftp,checkvol.ftp\r";c
   expect ".CMDP>" send "xdelete add.ftp,adduser.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** FTP USERS ************************************************\r";c
   expect ".CMDP>" send "xallocate users.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   $write SHOW FTP USERS\r";c
   expect ".CMDP>" send "   delete @1.ftp\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete users.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** FTP OFF **************************************************\r";c
   expect ".CMDP>" send "xallocate off.ftp,index,80\r";c
   expect ".CMDP>" send "xallocate down.ftp,index,80\r";c
   expect ".CMDP>" send "xallocate stop.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   $write STOP FTP SERVER\r";c
   expect ".CMDP>" send "   delete off.ftp,down.ftp,stop.ftp\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete off.ftp,down.ftp,stop.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** FTP ON ***************************************************\r";c
   expect ".CMDP>" send "xallocate on.ftp,index,80\r";c
   expect ".CMDP>" send "xallocate up.ftp,index,80\r";c
   expect ".CMDP>" send "xallocate start.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   $write START FTP SERVER\r";c
   expect ".CMDP>" send "   delete on.ftp,up.ftp,start.ftp\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete on.ftp,up.ftp,start.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** FTP RESET ************************************************\r";c
   expect ".CMDP>" send "xallocate reset.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   $write SHOW FTP USERS\r";c
   expect ".CMDP>" send "   $write STOP FTP SERVER\r";c
   expect ".CMDP>" send "   $write START FTP SERVER\r";c
   expect ".CMDP>" send "   delete reset.ftp\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete reset.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** FTP ADD *************************************************\r";c
   expect ".CMDP>" send "xallocate add.ftp,index,80\r";c
   expect ".CMDP>" send "xallocate adduser.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   delete add.ftp,adduser.ftp\r";c
   expect ".CMDP>" send "   $write ADD FTP USER\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete add.ftp,adduser.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** DIR ******************************************************\r";c
   expect ".CMDP>" send "xallocate dir.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   delete @1.ftp\r";c
   expect ".CMDP>" send "   $write === BEGIN DIR @2 ===\r";c
   expect ".CMDP>" send "   dir @2\r";c
   expect ".CMDP>" send "   $write === END DIR @2 ===\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete dir.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** COPYOUT **************************************************\r";c
   expect ".CMDP>" send "xallocate copyout.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   delete @1.ftp\r";c
   expect ".CMDP>" send "   $write === BEGIN COPYOUT @2 ===\r";c
   expect ".CMDP>" send "   type @2\r";c
   expect ".CMDP>" send "   $write === END COPYOUT @2 ===\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete copyout.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** COPYIN ***************************************************\r";c
   expect ".CMDP>" send "xallocate copyin.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   delete @1.ftp\r";c
   expect ".CMDP>" send "   $write === BEGIN COPYIN @2 ===\r";c
   expect ".CMDP>" send "   $job\r";c
   expect ".CMDP>" send "      xallocate copyin.tmp,index,@3\r";c
   expect ".CMDP>" send "      xdelete @2\r";c
   expect ".CMDP>" send "   $termjob\r";c
   expect ".CMDP>" send "   $ife 0\r";c
   expect ".CMDP>" send "      $build edit.tmp\r";c
   expect ".CMDP>" send "         option command=con: ; get copyin.tmp ; append\r";c
   expect ".CMDP>" send "      $endb\r";c
   expect ".CMDP>" send "      $job\r";c
   expect ".CMDP>" send "         load .bg,edit32\r";c
   expect ".CMDP>" send "         task .bg\r";c
   expect ".CMDP>" send "         start ,command=edit.tmp,list=con:\r";c
   expect ".CMDP>" send "      $termjob\r";c
   expect ".CMDP>" send "      $ife 0\r";c
   expect ".CMDP>" send "         copy copyin.tmp,@2\r";c
   expect ".CMDP>" send "      $endc\r";c
   expect ".CMDP>" send "      xdelete edit.tmp\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send "   xdelete copyin.tmp\r";c
   expect ".CMDP>" send "   $write === END COPYIN @2 ===\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete copyin.ftp\r";c
   expect ".CMDP>" send "*** STOR (COPYIN) ********************************************\r";c
   expect ".CMDP>" send "xallocate stor.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   delete @1.ftp\r";c
   expect ".CMDP>" send "   $ifx @2\r";c
   expect ".CMDP>" send "      $write STOR EXISTS\r";c
   expect ".CMDP>" send "   $else\r";c
   expect ".CMDP>" send "      $write STOR NEWFILE\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete stor.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** CHECKVOL *************************************************\r";c
   expect ".CMDP>" send "xallocate checkvol.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   delete @1.ftp\r";c
   expect ".CMDP>" send "   $write === BEGIN CHECKVOL @2 ===\r";c
   expect ".CMDP>" send "   $job\r";c
   expect ".CMDP>" send "      display volume ,@2\r";c
   expect ".CMDP>" send "      $write VOLUME @2 OK\r";c
   expect ".CMDP>" send "   $termjob\r";c
   expect ".CMDP>" send "   $ifne 0\r";c
   expect ".CMDP>" send "      $write VOLUME @2 NOT FOUND\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send "   $write === END CHECKVOL @2 ===\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete checkvol.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** DELETE ***************************************************\r";c
   expect ".CMDP>" send "xallocate delete.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   delete @1.ftp\r";c
   expect ".CMDP>" send "   $write === BEGIN DELETE @2 ===\r";c
   expect ".CMDP>" send "   $job\r";c
   expect ".CMDP>" send "      delete @2\r";c
   expect ".CMDP>" send "   $termjob\r";c
   expect ".CMDP>" send "   $ife 0\r";c
   expect ".CMDP>" send "      $write FILE DELETED\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send "   $write === END DELETE @2 ===\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete delete.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "*** RENAME ***************************************************\r";c
   expect ".CMDP>" send "xallocate rename.ftp,index,80\r";c
   expect ".CMDP>" send "$ifx @1.ftp\r";c
   expect ".CMDP>" send "   delete @1.ftp\r";c
   expect ".CMDP>" send "   $write === BEGIN RENAME @2 @3 ===\r";c
   expect ".CMDP>" send "   $job\r";c
   expect ".CMDP>" send "      rename @2,@3\r";c
   expect ".CMDP>" send "   $termjob\r";c
   expect ".CMDP>" send "   $ife 0\r";c
   expect ".CMDP>" send "      $write FILE RENAMED\r";c
   expect ".CMDP>" send "   $endc\r";c
   expect ".CMDP>" send "   $write === END RENAME @2 @3 ===\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endc\r";c
   expect ".CMDP>" send "delete rename.ftp\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$write FTP UNRECOGNISED COMMAND @1\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "endb\r";c
   # USERINIT.CSS/255
   expect "\r\n*"  send "build userinit.css\r";c
   expect ".CMDP>" send "prevent prompt\r";c
   expect ".CMDP>" send "prevent etm\r";c
   expect ".CMDP>" send "$write\r";c
   expect ".CMDP>" send "$write Type ACTUTY to load-start the MTM account utility.\r";c
   expect ".CMDP>" send "$write\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*"  send "rename userinit.css,userinit.css/255\r";c
   # ACTUTY.CSS/255
   expect "\r\n*" send "build actuty.css\r";c
   expect ".CMDP>" send "$write\r";c
   expect ".CMDP>" send "$write Useful, i.e. known, commands are:\r";c
   expect ".CMDP>" send "$write\r";c
   expect ".CMDP>" send "$write ACCOUNTS  [maxnum]\r";c
   expect ".CMDP>" send "$write ADD       act,grp,pass,name,*,*,priv\r";c
   expect ".CMDP>" send "$write CHANGE    act,[grp],[pass],[name],,,[priv]\r";c
   expect ".CMDP>" send "$write DELETE    act\r";c
   expect ".CMDP>" send "$write LIST      [act]\r";c
   expect ".CMDP>" send "$write PRIVILEGE [act[,priv]]\r";c
   expect ".CMDP>" send "$write MODE      [CREATE|UPDATE|REPORT]\r";c
   expect ".CMDP>" send "$write TOTAL     [act] (in MODE REPORT only)\r";c
   expect ".CMDP>" send "$write PAUSE     (type CONTINUE to return)\r";c
   expect ".CMDP>" send "$write END\r";c
   expect ".CMDP>" send "$write\r";c
   expect ".CMDP>" send "load actuty\r";c
   expect ".CMDP>" send "start ,com=con:,li=con:,upd=users.auf\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*"  send "rename actuty.css,actuty.css/255\r";c
   # MicroEMACS PATCH.CSS/165
   expect "\r\n*" send "build patch.css\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$build patch.ed\r";c
   expect ".CMDP>" send "   get cputs.c\r";c
   expect ".CMDP>" send "       sub/\"stdio.h\"/<stdio.h>/1\r";c
   expect ".CMDP>" send "       sub/void /int /1-\r";c
   expect ".CMDP>" send "       save *\r";c
   expect ".CMDP>" send "   get cnputs.c\r";c
   expect ".CMDP>" send "       sub/\"stdio.h\"/<stdio.h>/1\r";c
   expect ".CMDP>" send "       sub/void /int /1-\r";c
   expect ".CMDP>" send "       save *\r";c
   expect ".CMDP>" send "   get cputch.c\r";c
   expect ".CMDP>" send "       sub/\"stdio.h\"/<stdio.h>/1\r";c
   expect ".CMDP>" send "       sub/void /int /1-\r";c
   expect ".CMDP>" send "       save *\r";c
   expect ".CMDP>" send "   get fgetname.c\r";c
   expect ".CMDP>" send "       sub/\"stdio.h\"/<stdio.h>/1\r";c
   expect ".CMDP>" send "       save *\r";c
   expect ".CMDP>" send "   get getenv.c\r";c
   expect ".CMDP>" send "       sub/\"stdio.h\"/<stdio.h>/1\r";c
   expect ".CMDP>" send "       save *\r";c
   expect ".CMDP>" send "   get getport.c\r";c
   expect ".CMDP>" send "       sub/\"stdio.h\"/<stdio.h>/1\r";c
   expect ".CMDP>" send "       sub/void /int /1-\r";c
   expect ".CMDP>" send "       save *\r";c
   expect ".CMDP>" send "   get main.c\r";c
   expect ".CMDP>" send "       sub: *:*/:46\r";c
   expect ".CMDP>" send "       save *\r";c
   expect ".CMDP>" send "   get printv.c\r";c
   expect ".CMDP>" send "       sub/\"stdio.h\"/<stdio.h>/1\r";c
   expect ".CMDP>" send "       sub/void /int /1-\r";c
   expect ".CMDP>" send "       save *\r";c
   expect ".CMDP>" send "   get search.c\r";c
   expect ".CMDP>" send "       sub/void /int /1-\r";c
   expect ".CMDP>" send "       save *\r";c
   expect ".CMDP>" send "   end\r";c
   expect ".CMDP>" send "$endb\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$build make.css\r";c
   expect ".CMDP>" send "   cc basic,obj\r";c
   expect ".CMDP>" send "   cc bind,obj\r";c
   expect ".CMDP>" send "   cc buffer,obj\r";c
   expect ".CMDP>" send "   cc cgetch,obj\r";c
   expect ".CMDP>" send "   cc cgetche,obj\r";c
   expect ".CMDP>" send "   cc cgets,obj\r";c
   expect ".CMDP>" send "   cc cnputs,obj\r";c
   expect ".CMDP>" send "   cc cputch,obj\r";c
   expect ".CMDP>" send "   cc cputs,obj\r";c
   expect ".CMDP>" send "   cc crypt,obj\r";c
   expect ".CMDP>" send "   cc display,obj\r";c
   expect ".CMDP>" send "   cc enatype,obj\r";c
   expect ".CMDP>" send "   cc eval,obj\r";c
   expect ".CMDP>" send "   cc exec,obj\r";c
   expect ".CMDP>" send "   cc fgetname,obj\r";c
   expect ".CMDP>" send "   cc file,obj\r";c
   expect ".CMDP>" send "   cc fileio,obj\r";c
   expect ".CMDP>" send "   cc getenv,obj\r";c
   expect ".CMDP>" send "   cc getport,obj\r";c
   expect ".CMDP>" send "   cc input,obj\r";c
   expect ".CMDP>" send "   cc isearch,obj\r";c
   expect ".CMDP>" send "   cc line,obj\r";c
   expect ".CMDP>" send "   cc main,obj\r";c
   expect ".CMDP>" send "   cc printv,obj\r";c
   expect ".CMDP>" send "   cc random,obj\r";c
   expect ".CMDP>" send "   cc region,obj\r";c
   expect ".CMDP>" send "   cc rwran,obj\r";c
   expect ".CMDP>" send "   cc rwseq,obj\r";c
   expect ".CMDP>" send "   cc search,obj\r";c
   expect ".CMDP>" send "   cc spawn,obj\r";c
   expect ".CMDP>" send "   cc tcap,obj\r";c
   expect ".CMDP>" send "   cc termio,obj\r";c
   expect ".CMDP>" send "   cc window,obj\r";c
   expect ".CMDP>" send "   cc word,obj\r";c
   expect ".CMDP>" send "   wild delete,-.2\r";c
   expect ".CMDP>" send "   $exit\r";c
   expect ".CMDP>" send "$endb\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "load edit32\r";c
   expect ".CMDP>" send "start ,com=patch.ed,list=con:\r";c
   expect ".CMDP>" send "*\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "rename patch.css,patch.css/165\r";c
   # Over to stage 6
   expect "\r\n*" send "mark dsc4:,off ; display devices\r";c
   expect "DSC5  FE 0000   OFF" detach dm0 ; echo ; echo ; exit 0

   boot dm0
   exit 1

