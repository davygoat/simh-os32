# vim:set syntax=sh:
# vim:set nowrap:

   set console log=logs/%0.log

   set cpu idle

:install-compilers

   echo
   echo
   echo
   echo
   echo ************* STAGE 4 - COMPILERS AND DEV TOOLS *************
   echo
   echo
   echo

   set cpu 832
   set ttp enabled
   set pas devno=20
   set dm0 msm80
   set environ DATE=%DATE_MM%/%DATE_DD%/%DATE_YY%
   set environ TIME=%TIME_HH%:%TIME_MM%
   send delay=10000

   attach -e dm0 os32.dsk
   attach -n dm1 stug.dsk

   deposit 7c 002

   noexpect
   expect "ENTER DATE AND TIME" send "set time %DATE%,%TIME%\r";c
   expect "*";c
   expect "*" send "mark dsc4:,on\r";c
   expect "DSC4:  SYS" send "volume sys\r";c
   expect "*";c
   expect "*" send "volume sys/temp\r";c
   # LIB.CSS/25
   expect "\r\n*" send "alloc lib.css,in,80 ; build lib.css,append\r";c
   expect ".CMDP>" send "sys:lib/s @1 @2 @3 @4\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete lib.css/25 ; rename lib.css,lib.css/25 ; repro lib.css/25,ff00\r";c
   # LIB.CSS/0
   expect "\r\n*" send "alloc lib.css,in,80 ; build lib.css,append\r";c
   expect ".CMDP>" send "load sys:lib/s,20\r";c
   expect ".CMDP>" send "start ,@1 @2 @3 @4\r";c
   expect ".CMDP>" send "$exit\r";c
   expect ".CMDP>" send "endb\r";c
   # LIB.C/25
   expect "\r\n*" send "alloc lib.c,in,80 ; build lib.c,append\r";c
   expect ".CMDP>" send "/*\r";c
   expect ".CMDP>" send " * This program simplifies the creation and maintenance of object\r";c
   expect ".CMDP>" send " * libraries. OS/32's LIBLDR has somewhat cryptic syntax, using two\r";c
   expect ".CMDP>" send " * character commands, and numeric LUs. The commands are sensitive\r";c
   expect ".CMDP>" send " * to whitespace. As usual, documentation is also missing.\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * Fortunately, OS/32 libraries are not that difficult to reverse\r";c
   expect ".CMDP>" send " * engineer:\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * - A <library> is merely a concatenation of <object> files.\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * - An <object> is a collection of 126 byte <records>. The first\r";c
   expect ".CMDP>" send " *   half word (two bytes) of each record are a kind of 'record\r";c
   expect ".CMDP>" send " *   number'.\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * - The first <record> of each <object> has an intial half word\r";c
   expect ".CMDP>" send " *   with value 0xFFFF. The object's name is found at offset 5,\r";c
   expect ".CMDP>" send " *   and the name is padded with spaces up to a maximum of 8\r";c
   expect ".CMDP>" send " *   characters.\r";c
   expect ".CMDP>" send " *\r";c
   expect ".CMDP>" send " * Externals are listed after the object's code (binary), and are\r";c
   expect ".CMDP>" send " * easily recognised in a hex dump. But I haven't yet figured out\r";c
   expect ".CMDP>" send " * a method for determining the correct offset.\r";c
   expect ".CMDP>" send " */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "#include <stdio.h>\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "/* defined in std.h, but cannot #include with stdio... */\r";c
   expect ".CMDP>" send "#define READ 0\r";c
   expect ".CMDP>" send "#define WRITE 1\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "/* I'm going to use a function instead of the macro */\r";c
   expect ".CMDP>" send "#undef toupper\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "/* there is no rename() function, but there is an undocumented mv() */\r";c
   expect ".CMDP>" send "#define rename mv\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "static struct\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   unsigned short recno;        /* two bytes, FFFF for start of object */\r";c
   expect ".CMDP>" send "   unsigned char  fill1[3];     /* three bytes, last always 0F? */\r";c
   expect ".CMDP>" send "   char           name[8];      /* 8 chars, padded with spaces */\r";c
   expect ".CMDP>" send "   unsigned char  therest[113]; /* the rest, 126 bytes total */\r";c
   expect ".CMDP>" send "} rec[1];\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "static char *tmp = \"zzzzzzzz.lib\";\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int exists (fnam)\r";c
   expect ".CMDP>" send "   char *fnam;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int fd = open (fnam, READ|IBINARY);\r";c
   expect ".CMDP>" send "   if (fd >= 0) close (fd);\r";c
   expect ".CMDP>" send "   return fd >= 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int openread (fnam, what)\r";c
   expect ".CMDP>" send "   char *fnam;\r";c
   expect ".CMDP>" send "   char *what;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int fd = open (fnam, READ|IBINARY);\r";c
   expect ".CMDP>" send "   if (fd < 0)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"CANNOT OPEN %%s: %%s\\n\", what, fnam);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return fd;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int openscratch (fnam, what)\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int fd;\r";c
   expect ".CMDP>" send "   remove (fnam);\r";c
   expect ".CMDP>" send "   fd = creat (fnam, WRITE|IBINARY);\r";c
   expect ".CMDP>" send "   if (fd < 0)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"CANNOT CREATE %%s: %%s\\n\", fnam, what);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return fd;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char toupper(c)\r";c
   expect ".CMDP>" send "   char c;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (c >= 'a' && c <= 'z') return c - ('a'-'A');\r";c
   expect ".CMDP>" send "   else return c;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "char *strchr(str,chr)\r";c
   expect ".CMDP>" send "   char *str;\r";c
   expect ".CMDP>" send "   char chr;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while ( *str )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if ( *str == chr ) return str;\r";c
   expect ".CMDP>" send "      str++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return NULL;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int stricmp(s1,s2)\r";c
   expect ".CMDP>" send "   char *s1;\r";c
   expect ".CMDP>" send "   char *s2;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   while ( *s1 && *s2 )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      int diff = toupper(*s1) - toupper(*s2);\r";c
   expect ".CMDP>" send "      if (diff) return diff;\r";c
   expect ".CMDP>" send "      s1++;\r";c
   expect ".CMDP>" send "      s2++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   return toupper(*s1) - toupper(*s2);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int objmatch (obj)\r";c
   expect ".CMDP>" send "   char *obj;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *p = obj;\r";c
   expect ".CMDP>" send "   char *q = rec->name;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   while ( q < rec->therest &&\r";c
   expect ".CMDP>" send "           *q != ' ' &&\r";c
   expect ".CMDP>" send "           *p != 0 &&\r";c
   expect ".CMDP>" send "           toupper(*p) == toupper(*q) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      p++;\r";c
   expect ".CMDP>" send "      q++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if ( q == rec->therest || *q == ' ' ) return *p == 0;\r";c
   expect ".CMDP>" send "   else return toupper(*p) - toupper(*q) == 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "int main (argc, argv)\r";c
   expect ".CMDP>" send "   int argc;\r";c
   expect ".CMDP>" send "   char **argv;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char *cmd, lib[32], obj[32];\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * All our files are going to have 126 byte record lengths. The\r";c
   expect ".CMDP>" send "    * C library uses a global variable fsrecl for this.\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   extern int fsrecl;\r";c
   expect ".CMDP>" send "   fsrecl = 126;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * Check required parameters. The argument count is a bit messed\r";c
   expect ".CMDP>" send "    * up by concatenated CSS parameters. If you run LIB.CSS without\r";c
   expect ".CMDP>" send "    * parameters, i.e. all params null, you get argv=5 and argv[1],\r";c
   expect ".CMDP>" send "    * argv[2], argv[3] return empty strings (not NULL, not junk).\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   cmd = argv[1];\r";c
   expect ".CMDP>" send "   strncpy (lib, argv[2], sizeof(lib));\r";c
   expect ".CMDP>" send "   strncpy (obj, argv[3], sizeof(obj));\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (!*cmd || !*lib) usageexit();\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (!*obj &&\r";c
   expect ".CMDP>" send "       stricmp(cmd,\"CREATE\") &&\r";c
   expect ".CMDP>" send "       stricmp(cmd,\"LIST\")) usageexit();\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * Check command.\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if ( stricmp(cmd,\"CREATE\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"LIST\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"ADD\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"REPLACE\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"REMOVE\") &&\r";c
   expect ".CMDP>" send "        stricmp(cmd,\"EXTRACT\") )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"INVALID COMMAND: '%%s'\\n\", cmd);\r";c
   expect ".CMDP>" send "      printf (\"%%s%%s\\n\",\r";c
   expect ".CMDP>" send "              \"VALID COMMANDS ARE: CREATE, LIST, ADD, REPLACE, \",\r";c
   expect ".CMDP>" send "              \"REMOVE, EXTRACT.\");\r";c
   expect ".CMDP>" send "      return 1;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * Default file extensions. Libraries default to .LIB, but\r";c
   expect ".CMDP>" send "    * may have .OBJ if you prefer. Objects must not have an\r";c
   expect ".CMDP>" send "    * extension because we may use it to refer to a library\r";c
   expect ".CMDP>" send "    * entry that we want to remove.\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (!strchr(lib,'.')) strcat (lib, \".lib\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (*obj && strchr(obj,'.') )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"OBJECT FILE EXTENSION NOT ALLOWED: %%s\\n\", obj);\r";c
   expect ".CMDP>" send "      return 1;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /*\r";c
   expect ".CMDP>" send "    * Do the work.\r";c
   expect ".CMDP>" send "    */\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "        if (!stricmp(cmd,\"CREATE\"))  libcreate  (lib);\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"LIST\"))    liblist    (lib);\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"ADD\"))     libmodify  (lib, obj, 'A');\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"REPLACE\")) libmodify  (lib, obj, 'P');\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"REMOVE\"))  libmodify  (lib, obj, 'M');\r";c
   expect ".CMDP>" send "   else if (!stricmp(cmd,\"EXTRACT\")) libextract (lib, obj);\r";c
   expect ".CMDP>" send "   else\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"Wobbler!\\n\");\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   return 0;\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "fatal ()\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   remove (tmp);\r";c
   expect ".CMDP>" send "   exit (1);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "usageexit ()\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   printf (\"\\n\");\r";c
   expect ".CMDP>" send "   printf (\"\\n\");\r";c
   expect ".CMDP>" send "   printf (\"USAGE: LIB CREATE  libfd\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB LIST    libfd\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB ADD     libfd obj\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB REPLACE libfd obj\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB REMOVE  libfd obj\\n\");\r";c
   expect ".CMDP>" send "   printf (\"       LIB EXTRACT libfd obj\\n\");\r";c
   expect ".CMDP>" send "   printf (\"\\n\");\r";c
   expect ".CMDP>" send "   fatal ();\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "libcreate (lib)\r";c
   expect ".CMDP>" send "   char *lib;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   if (exists(lib))\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"LIBRARY ALREADY EXISTS: %%s\\n\", lib);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   close (openscratch(lib,\"LIBRARY\"));\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "liblist (lib)\r";c
   expect ".CMDP>" send "   char *lib;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int fd, name[10], nobs=0, nrec=0, ntot=0;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   fd = openread (lib, \"LIBRARY\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   printf (\"\\n\\n\");\r";c
   expect ".CMDP>" send "   printf (\" name       recs\\n\");\r";c
   expect ".CMDP>" send "   printf (\" --------  -----\\n\");\r";c
   expect ".CMDP>" send "   while ( read(fd,rec,sizeof(rec)) == sizeof(rec) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (rec->recno == 0xFFFF)\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         if (nobs > 0) printf (\" %%s  %%5d\\n\", name, nrec);\r";c
   expect ".CMDP>" send "         sprintf (name, \"%%8.8s\", rec->name);\r";c
   expect ".CMDP>" send "         nobs++;\r";c
   expect ".CMDP>" send "         nrec = 0;\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      nrec++;\r";c
   expect ".CMDP>" send "      ntot++;\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send "   if (nobs > 0) printf (\" %%s  %%5d\\n\", name, nrec);\r";c
   expect ".CMDP>" send "   printf (\"\\n %%d objects in %%s, %%d records total\\n\\n\", nobs, lib, ntot);\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   close (fd);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "libextract (lib, obj)\r";c
   expect ".CMDP>" send "   char *lib;\r";c
   expect ".CMDP>" send "   char *obj;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   int libfd, objfd;\r";c
   expect ".CMDP>" send "   char copy=0, found=0, objfn[32];\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   libfd = openread (lib, \"LIBRARY\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   sprintf (objfn, \"%%s.obj\", obj);\r";c
   expect ".CMDP>" send "   objfd = openscratch (objfn, \"OBJECT\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   while ( read(libfd,rec,sizeof(rec)) == sizeof(rec) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (rec->recno == 0xFFFF)\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         if (objmatch(obj))\r";c
   expect ".CMDP>" send "         {\r";c
   expect ".CMDP>" send "            copy = 1;\r";c
   expect ".CMDP>" send "            found = 1;\r";c
   expect ".CMDP>" send "         }\r";c
   expect ".CMDP>" send "         else\r";c
   expect ".CMDP>" send "            copy = 0;\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      if (copy) write (objfd, rec, sizeof(rec));\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   if (!found)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"OBJECT %%s NOT FOUND IN LIBRARY\", obj);\r";c
   expect ".CMDP>" send "      close (objfd);\r";c
   expect ".CMDP>" send "      remove (objfd);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   close (objfd);\r";c
   expect ".CMDP>" send "   close (libfd);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "libmodify (lib, obj, op)\r";c
   expect ".CMDP>" send "   char *lib;\r";c
   expect ".CMDP>" send "   char *obj;\r";c
   expect ".CMDP>" send "   int op;\r";c
   expect ".CMDP>" send "{\r";c
   expect ".CMDP>" send "   char found=0, copy=0, objfn[32];\r";c
   expect ".CMDP>" send "   int libfd, objfd, tmpfd;\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* add/replace/remove */\r";c
   expect ".CMDP>" send "   if (!strchr(\"APM\",op))\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"LIBPROCESS INVALID OPERATION '%%c'\\n\", op);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   libfd = openread    (lib, \"LIBRARY\");\r";c
   expect ".CMDP>" send "   tmpfd = openscratch (tmp, \"TEMPFILE\");\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   while ( read(libfd,rec,sizeof(rec)) == sizeof(rec) )\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      if (rec->recno == 0xFFFF)\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         if (objmatch(obj))\r";c
   expect ".CMDP>" send "         {\r";c
   expect ".CMDP>" send "            copy = 0;\r";c
   expect ".CMDP>" send "            found = 1;\r";c
   expect ".CMDP>" send "         }\r";c
   expect ".CMDP>" send "         else\r";c
   expect ".CMDP>" send "            copy = 1;\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      if (copy) write (tmpfd, rec, sizeof(rec));\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* replace/remove */\r";c
   expect ".CMDP>" send "   if (strchr(\"PM\",op) && !found)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"OBJECT %%s NOT FOUND IN LIBRARY\", obj);\r";c
   expect ".CMDP>" send "      close (tmpfd);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* add */\r";c
   expect ".CMDP>" send "   if (strchr(\"A\",op) && found)\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      printf (\"OBJECT %%s ALREADY EXISTS IN LIBRARY\\n\", obj);\r";c
   expect ".CMDP>" send "      close (tmpfd);\r";c
   expect ".CMDP>" send "      fatal ();\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* add/replace */\r";c
   expect ".CMDP>" send "   if (strchr(\"AP\",op))\r";c
   expect ".CMDP>" send "   {\r";c
   expect ".CMDP>" send "      sprintf (objfn, \"%%s.obj\", obj);\r";c
   expect ".CMDP>" send "      objfd = openread (objfn, \"OBJECT\");\r";c
   expect ".CMDP>" send "      while ( read(objfd,rec,sizeof(rec)) == sizeof(rec) )\r";c
   expect ".CMDP>" send "      {\r";c
   expect ".CMDP>" send "         write (tmpfd, rec, sizeof(rec));\r";c
   expect ".CMDP>" send "      }\r";c
   expect ".CMDP>" send "      close (objfd);\r";c
   expect ".CMDP>" send "   }\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   close (tmpfd);\r";c
   expect ".CMDP>" send "   close (libfd);\r";c
   expect ".CMDP>" send " \r";c
   expect ".CMDP>" send "   /* add/replace/remove */\r";c
   expect ".CMDP>" send "   if (strchr(\"APM\",op)) rename (tmp, lib);\r";c
   expect ".CMDP>" send "   else remove (tmp);\r";c
   expect ".CMDP>" send "}\r";c
   expect ".CMDP>" send "endb\r";c
   expect "\r\n*" send "xdelete lib.c/25 ; rename lib.c,lib.c/25\r";c
   # Copy CAL to /10 because we may need to juggle with it later on
   expect "\r\n*" send "load copy32\r";c
   expect "TSKID = COPY32" send "start\r";c
   expect "COPY32>" send "copy cal32.tsk,cal32.tsk/10\r";c
   expect "COPY32>" send "end\r";c
   # Fortran tape (Development and Global/Optimizing) goes into /11
   expect "COPY32:END OF TASK" attach -e -r mt0 tapes/04-101M31R09_FortranVII.tap ; send "load backup\r";c
   expect "TSKID = BACKUP" send "start ,in=mag1:,out=dsc4:,ac=11,verify,list=con:\r";c
   expect "BACKUP:END OF TASK" send "load copy32\r";c
   expect "TSKID = COPY32" send "start\r";c
   expect "COPY32>" send "copy f7d51.tsk/11,f7d51.tsk/0\r";c
   expect "COPY32>" send "copy f7d51.err/11,f7d51.err/0\r";c
   expect "COPY32>" send "copy f7lib51.obj/11,f7lib51.obj/0\r";c
   expect "COPY32>" send "copy f7rtl51.err/11,f7rtl51.err/0\r";c
   expect "COPY32>" send "copy pem51.obj/11,pem51.obj/0\r";c
   expect "COPY32>" send "copy f7o51.tsk/11,f7o51.tsk/0\r";c
   expect "COPY32>" send "copy f7zo51.err/11,f7zo51.err/0\r";c
   expect "COPY32>" send "copy f7lib51a.obj/11,f7lib51a.obj/0\r";c
   expect "COPY32>" send "copy pem51a.obj/11,pem51a.obj/0\r";c
   expect "COPY32>" send "end\r";c
   # Pascal tape goes to /13
   expect "COPY32:END OF TASK" attach -e -r mt0 tapes/OS32_pascal.tap ; send "load backup\r";c
   expect "TSKID = BACKUP" send "start ,in=mag1:,out=dsc4:,ac=13,verify,list=con:\r";c
   expect "BACKUP:TASK PAUSED" send "cancel backup\r";c
   expect "BACKUP:END OF TASK" send "load copy32\r";c
   expect "TSKID = COPY32" send "start\r";c
   expect "COPY32>" send "copy pascal.tsk/13,pascal.tsk/0\r";c
   expect "COPY32>" send "copy pasrtl.obj/13,pasrtl.obj/0\r";c
   expect "COPY32>" send "copy prefix.pas/13,prefix.pas/0\r";c
   expect "COPY32>" send "copy prefix.pas/13,prefix.pas/0\r";c
   expect "COPY32>" send "copy primes.pas/13,primes.pas/0\r";c
   expect "COPY32>" send "copy smplsvcs.pas/13,smplsvcs.pas/0\r";c
   expect "COPY32>" send "copy pemath.obj/13,pemath.obj/0\r";c
   expect "COPY32>" send "copy f7rtl.obj/13,f7rtl51.obj/0\r";c
   expect "COPY32>" send "end\r";c
   # C, Pascal, Debugger goes to /14
   expect "COPY32:END OF TASK" attach -e -r mt0 tapes/C_Deb_Bas_Pas.tap ; send "load backup\r";c
   expect "TSKID = BACKUP" send "start ,in=mag1:,out=dsc4:,ac=14,verify,list=con:\r";c
   expect "BACKUP:TASK PAUSED" send "cancel backup\r";c
   expect "BACKUP:END OF TASK" send "repro userinit.css/14,0 ; delete userinit.css/14 ; load copy32\r";c
   expect "TSKID = COPY32" send "start\r";c
   expect "COPY32>" send "copy pp.tsk/14,pp.tsk/0\r";c
   expect "COPY32>" send "copy p1.tsk/14,p1.tsk/0\r";c
   expect "COPY32>" send "copy p2.tsk/14,p2.tsk/0\r";c
   expect "COPY32>" send "copy lister.tsk/14,lister.tsk/0\r";c
   expect "COPY32>" send "copy libe.obj/14,libe.obj/0\r";c
   expect "COPY32>" send "copy libu.obj/14,libu.obj/0\r";c
   expect "COPY32>" send "copy libw.obj/14,libw.obj/0\r";c
   expect "COPY32>" send "copy cinit.obj/14,cinit.obj/0\r";c
   expect "COPY32>" send "copy cfinit.obj/14,cfinit.obj/0\r";c
   expect "COPY32>" send "copy eouc.css/14,eouc.css/0\r";c
   expect "COPY32>" send "copy chloc.css/14,chloc.css/0\r";c
   expect "COPY32>" send "option noterm,nopsfm\r";c
   expect "COPY32>" send "copy chfiles.css/14,chfiles.css/0\r";c
   expect "COPY32>" send "end\r";c
   # SORT/MERGE-II goes to /15 (probably needs COBOL)
   expect "COPY32:END OF TASK" attach -e -r mt0 tapes/04-081M71R02_sortMergeII.tap ; send "load backup\r";c
   expect "TSKID = BACKUP" send "start ,in=mag1:,out=dsc4:,ac=15,verify,list=con:\r";c
   expect "BACKUP:END OF TASK" send "load copy32\r";c
   expect "TSKID = COPY32" send "start\r";c
   expect "COPY32>" send "end\r";c
   # DMS/32 goes to /16 (probably needs COBOL, but might work with Fortran)
   expect "COPY32:END OF TASK" attach -e -r mt0 tapes/04-108M31R05_DMS32.tap ; send "load backup\r";c
   expect "TSKID = BACKUP" send "start ,in=mag1:,out=dsc4:,ac=16,verify,list=con:\r";c
   expect "BACKUP:END OF TASK" send "load copy32\r";c
   expect "TSKID = COPY32" send "start\r";c
   expect "COPY32>" send "end\r";c
   # MEDIT goes to /17 (someone might prefer this to the EDIT/32 line editor, needs terminal config)
   expect "COPY32:END OF TASK" attach -e -r mt0 tapes/04-199M71R01_OS32Medit.tap ; send "load backup\r";c
   expect "TSKID = BACKUP" send "start ,in=mag1:,out=dsc4:,ac=17,delete,verify,list=con:\r";c
   expect "BACKUP:END OF TASK" send "load copy32\r";c
   expect "TSKID = COPY32" send "start\r";c
   expect "COPY32>" send "end\r";c
   # IUG-165 (MicroEMACS, lots of people might like this, needs termcap setup)
   expect "COPY32:END OF TASK" attach -e -r mt0 tapes/iug0165.tap ; send "load backup\r";c
   expect "TSKID = BACKUP" send "start ,in=mag1:,out=dsc4:,ac=165,verify,delete,list=con:\r";c
   expect "BACKUP:END OF TASK" send "load copy32\r";c
   expect "TSKID = COPY32" send "start\r";c
   expect "COPY32>" send "end\r";c
   # IUG-200 (high level assembler language macros)
   expect "COPY32:END OF TASK" attach -e -r mt0 tapes/iug0200.tap ; send "load backup\r";c
   expect "TSKID = BACKUP" send "start ,in=mag1:,out=dsc4:,ac=200,verify,delete,list=con:\r";c
   expect "BACKUP:END OF TASK" send "load copy32\r";c
   expect "TSKID = COPY32" send "start\r";c
   expect "COPY32>" send "copy mactools.mlb/200,mactools.mlb/0\r";c
   expect "COPY32>" send "copy hlal2.mlb/200,hlal2.mlb/0\r";c
   expect "COPY32>" send "copy hlal2.all/200,hlal2.all/0\r";c
   expect "COPY32>" send "end\r";c
   # IUG-523 (Software Tools), gets its own disk
   expect "COPY32:END OF TASK" attach -e -r mt0 tapes/iug0523.tap ; send "load fastchek\r";c
   expect "TSKID = FASTCHEK" send "start ,init=dsc3:,vol=stug,li=con:\r";c
   expect "FASTCHEK:END OF TASK" send "mark dsc3:,on\r";c
   expect "DSC3:  STUG" send "load backup\r";c
   expect "TSKID = BACKUP" send "start ,in=mag1:,out=stug:,verify,delete,list=con:\r";c
   expect "BACKUP:END OF TASK" send "chloc ; chfiles ; mark dsc3:,off ; mark dsc4:,off ; d d\r";c
   expect "DSC5  FE 0000   OFF" ; echo ; echo ; exit 0

   boot dm0
   exit 1
